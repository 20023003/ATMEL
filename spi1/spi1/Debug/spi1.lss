
spi1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002ae  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800104  00800104  00000346  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000003b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000159d  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e08  00000000  00000000  00001a75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008dd  00000000  00000000  0000287d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008d1  00000000  00000000  00003358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e1  00000000  00000000  00003c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  0000410a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__vector_19>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ee ea       	ldi	r30, 0xAE	; 174
  e0:	f2 e0       	ldi	r31, 0x02	; 2
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a4 30       	cpi	r26, 0x04	; 4
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a4 e0       	ldi	r26, 0x04	; 4
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ab 30       	cpi	r26, 0x0B	; 11
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 ae 00 	call	0x15c	; 0x15c <main>
 102:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 10a:	0e 94 c1 00 	call	0x182	; 0x182 <system_init>
 10e:	08 95       	ret

00000110 <SPI_MasterInit>:
#define SPI_MISO_PIN PB6 // MISO pin connected to PB6
#define SPI_SCK_PIN PB7
void SPI_MasterInit()
{
	// Set SS, MOSI, and SCK as outputs
	DDRB |= (1 << SPI_SS_PIN) | (1 << SPI_MOSI_PIN) | (1 << SPI_SCK_PIN);
 110:	84 b1       	in	r24, 0x04	; 4
 112:	80 6b       	ori	r24, 0xB0	; 176
 114:	84 b9       	out	0x04, r24	; 4
	// Enable SPI, Set as Master
	SPCR0 = (1 << SPE) | (1 << MSTR);
 116:	80 e5       	ldi	r24, 0x50	; 80
 118:	8c bd       	out	0x2c, r24	; 44
	// Set SS pin high (inactive)
	PORTB |= (1 << SPI_SS_PIN);
 11a:	2c 9a       	sbi	0x05, 4	; 5
 11c:	08 95       	ret

0000011e <SPI_MasterTransmit>:
}
void SPI_MasterTransmit(uint8_t data)
{
	// Set SS pin low (activate slave)
	PORTB &= ~(1 << SPI_SS_PIN);
 11e:	2c 98       	cbi	0x05, 4	; 5
	// Start transmission
	SPDR0 = data;
 120:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission to complete
	while (!(SPSR0 & (1 << SPIF)))
 122:	0d b4       	in	r0, 0x2d	; 45
 124:	07 fe       	sbrs	r0, 7
 126:	fd cf       	rjmp	.-6      	; 0x122 <SPI_MasterTransmit+0x4>
	{
		// Add timeout or error handling if necessary
	}
	// Set SS pin high (deactivate slave)
	PORTB |= (1 << SPI_SS_PIN);
 128:	2c 9a       	sbi	0x05, 4	; 5
 12a:	08 95       	ret

0000012c <SPI_MasterTransmitString>:
	/* Replace with your application code */
	while (1) {
		SPI_MasterTransmitString("L1"); 
	}
}
void SPI_MasterTransmitString(const char* str) {
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ec 01       	movw	r28, r24
	for (int i = 0; str[i] != '\0'; i++) {
 132:	88 81       	ld	r24, Y
 134:	88 23       	and	r24, r24
 136:	79 f0       	breq	.+30     	; 0x156 <SPI_MasterTransmitString+0x2a>
 138:	21 96       	adiw	r28, 0x01	; 1
		SPI_MasterTransmit(str[i]);
 13a:	0e 94 8f 00 	call	0x11e	; 0x11e <SPI_MasterTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13e:	2f ef       	ldi	r18, 0xFF	; 255
 140:	80 e7       	ldi	r24, 0x70	; 112
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	21 50       	subi	r18, 0x01	; 1
 146:	80 40       	sbci	r24, 0x00	; 0
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	e1 f7       	brne	.-8      	; 0x144 <SPI_MasterTransmitString+0x18>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <SPI_MasterTransmitString+0x22>
 14e:	00 00       	nop
	while (1) {
		SPI_MasterTransmitString("L1"); 
	}
}
void SPI_MasterTransmitString(const char* str) {
	for (int i = 0; str[i] != '\0'; i++) {
 150:	89 91       	ld	r24, Y+
 152:	81 11       	cpse	r24, r1
 154:	f2 cf       	rjmp	.-28     	; 0x13a <SPI_MasterTransmitString+0xe>
		SPI_MasterTransmit(str[i]);
		_delay_ms(100);
	}
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <main>:
	PORTB |= (1 << SPI_SS_PIN);
}
int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 15c:	0e 94 85 00 	call	0x10a	; 0x10a <atmel_start_init>
		cpu_irq_enable();
 160:	78 94       	sei
		// Initialize SPI as master
		SPI_MasterInit();
 162:	0e 94 88 00 	call	0x110	; 0x110 <SPI_MasterInit>
	/* Replace with your application code */
	while (1) {
		SPI_MasterTransmitString("L1"); 
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 96 00 	call	0x12c	; 0x12c <SPI_MasterTransmitString>
 16e:	fb cf       	rjmp	.-10     	; 0x166 <main+0xa>

00000170 <SPI_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 170:	26 98       	cbi	0x04, 6	; 4
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
 172:	2e 98       	cbi	0x05, 6	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 174:	25 9a       	sbi	0x04, 5	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 176:	2d 98       	cbi	0x05, 5	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 178:	27 9a       	sbi	0x04, 7	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 17a:	2f 98       	cbi	0x05, 7	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
 17c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <SPI_0_init>
 180:	08 95       	ret

00000182 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTIM4) | (1 << PRTIM3);
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
	       | (1 << PRADC) | (1 << PRSPI0);

	PRR2 = (1 << PRUSART2) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTWI1);
 18e:	9f e0       	ldi	r25, 0x0F	; 15
 190:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f8063>
		break;
	case PORT_DIR_OUT:
		DDRA |= mask;
		break;
	case PORT_DIR_OFF:
		DDRA &= ~mask;
 194:	91 b1       	in	r25, 0x01	; 1
 196:	11 b8       	out	0x01, r1	; 1

		PORTA |= mask;
 198:	92 b1       	in	r25, 0x02	; 2
 19a:	82 b9       	out	0x02, r24	; 2
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 19c:	94 b1       	in	r25, 0x04	; 4
 19e:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 1a0:	95 b1       	in	r25, 0x05	; 5
 1a2:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 1a4:	97 b1       	in	r25, 0x07	; 7
 1a6:	17 b8       	out	0x07, r1	; 7

		PORTC |= mask;
 1a8:	98 b1       	in	r25, 0x08	; 8
 1aa:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 1ac:	9a b1       	in	r25, 0x0a	; 10
 1ae:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 1b0:	9b b1       	in	r25, 0x0b	; 11
 1b2:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 1b4:	8d b1       	in	r24, 0x0d	; 13
 1b6:	80 78       	andi	r24, 0x80	; 128
 1b8:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 1ba:	8e b1       	in	r24, 0x0e	; 14
 1bc:	8f 67       	ori	r24, 0x7F	; 127
 1be:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 1c0:	40 e0       	ldi	r20, 0x00	; 0
 1c2:	60 e8       	ldi	r22, 0x80	; 128
 1c4:	81 e6       	ldi	r24, 0x61	; 97
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 1cc:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 1ce:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	SPI_0_initialization();
 1d0:	0e 94 b8 00 	call	0x170	; 0x170 <SPI_0_initialization>
 1d4:	08 95       	ret

000001d6 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 1d6:	2f b7       	in	r18, 0x3f	; 63
	cli
 1d8:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 1da:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 1dc:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 1de:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 1e0:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 1e2:	08 95       	ret

000001e4 <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
 1e4:	e4 e6       	ldi	r30, 0x64	; 100
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	8b 7f       	andi	r24, 0xFB	; 251
 1ec:	80 83       	st	Z, r24
 1ee:	80 ed       	ldi	r24, 0xD0	; 208
 1f0:	8c bd       	out	0x2c, r24	; 44
 1f2:	e4 e0       	ldi	r30, 0x04	; 4
 1f4:	f1 e0       	ldi	r31, 0x01	; 1
 1f6:	10 82       	st	Z, r1
 1f8:	16 82       	std	Z+6, r1	; 0x06
 1fa:	15 82       	std	Z+5, r1	; 0x05
 1fc:	08 95       	ret

000001fe <__vector_19>:
}

ISR(SPI0_STC_vect)
{
 1fe:	1f 92       	push	r1
 200:	0f 92       	push	r0
 202:	0f b6       	in	r0, 0x3f	; 63
 204:	0f 92       	push	r0
 206:	11 24       	eor	r1, r1
 208:	2f 93       	push	r18
 20a:	3f 93       	push	r19
 20c:	4f 93       	push	r20
 20e:	5f 93       	push	r21
 210:	6f 93       	push	r22
 212:	7f 93       	push	r23
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR0;
 224:	9e b5       	in	r25, 0x2e	; 46
	uint8_t wdata = 0;

	if (SPI_0_desc.type != SPI_WRITE) {
 226:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x4>
 22a:	82 30       	cpi	r24, 0x02	; 2
 22c:	11 f1       	breq	.+68     	; 0x272 <__vector_19+0x74>
		*SPI_0_desc.data = rdata;
 22e:	c4 e0       	ldi	r28, 0x04	; 4
 230:	d1 e0       	ldi	r29, 0x01	; 1
 232:	a9 81       	ldd	r26, Y+1	; 0x01
 234:	ba 81       	ldd	r27, Y+2	; 0x02
 236:	fd 01       	movw	r30, r26
 238:	91 93       	st	Z+, r25
	}

	SPI_0_desc.data++;
 23a:	fa 83       	std	Y+2, r31	; 0x02
 23c:	e9 83       	std	Y+1, r30	; 0x01

	if (SPI_0_desc.type != SPI_READ)
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	19 f0       	breq	.+6      	; 0x248 <__vector_19+0x4a>
		wdata = *SPI_0_desc.data;
 242:	11 96       	adiw	r26, 0x01	; 1
 244:	9c 91       	ld	r25, X
 246:	01 c0       	rjmp	.+2      	; 0x24a <__vector_19+0x4c>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR0;
	uint8_t wdata = 0;
 248:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
 24a:	e4 e0       	ldi	r30, 0x04	; 4
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	83 81       	ldd	r24, Z+3	; 0x03
 250:	81 50       	subi	r24, 0x01	; 1
 252:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
 254:	88 23       	and	r24, r24
 256:	11 f0       	breq	.+4      	; 0x25c <__vector_19+0x5e>
		// more data to send, send a byte
		SPDR0 = wdata;
 258:	9e bd       	out	0x2e, r25	; 46
 25a:	14 c0       	rjmp	.+40     	; 0x284 <__vector_19+0x86>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
 25c:	e4 e0       	ldi	r30, 0x04	; 4
 25e:	f1 e0       	ldi	r31, 0x01	; 1
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
 264:	05 80       	ldd	r0, Z+5	; 0x05
 266:	f6 81       	ldd	r31, Z+6	; 0x06
 268:	e0 2d       	mov	r30, r0
 26a:	30 97       	sbiw	r30, 0x00	; 0
 26c:	59 f0       	breq	.+22     	; 0x284 <__vector_19+0x86>
			SPI_0_desc.cb();
 26e:	09 95       	icall
		}
	}
}
 270:	09 c0       	rjmp	.+18     	; 0x284 <__vector_19+0x86>

	if (SPI_0_desc.type != SPI_WRITE) {
		*SPI_0_desc.data = rdata;
	}

	SPI_0_desc.data++;
 272:	e4 e0       	ldi	r30, 0x04	; 4
 274:	f1 e0       	ldi	r31, 0x01	; 1
 276:	a1 81       	ldd	r26, Z+1	; 0x01
 278:	b2 81       	ldd	r27, Z+2	; 0x02
 27a:	cd 01       	movw	r24, r26
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	92 83       	std	Z+2, r25	; 0x02
 280:	81 83       	std	Z+1, r24	; 0x01
 282:	df cf       	rjmp	.-66     	; 0x242 <__vector_19+0x44>
		SPI_0_desc.status = SPI_DONE;
		if (SPI_0_desc.cb != NULL) {
			SPI_0_desc.cb();
		}
	}
}
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	bf 91       	pop	r27
 28e:	af 91       	pop	r26
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	7f 91       	pop	r23
 296:	6f 91       	pop	r22
 298:	5f 91       	pop	r21
 29a:	4f 91       	pop	r20
 29c:	3f 91       	pop	r19
 29e:	2f 91       	pop	r18
 2a0:	0f 90       	pop	r0
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	0f 90       	pop	r0
 2a6:	1f 90       	pop	r1
 2a8:	18 95       	reti

000002aa <_exit>:
 2aa:	f8 94       	cli

000002ac <__stop_program>:
 2ac:	ff cf       	rjmp	.-2      	; 0x2ac <__stop_program>
