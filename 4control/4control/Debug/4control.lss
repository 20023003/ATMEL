
4control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000002be  00000352  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010c  0080010c  0000035e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ae5  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c1  00000000  00000000  00000f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000439  00000000  00000000  000017c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000019c  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	f7 c0       	rjmp	.+494    	; 0x234 <__vector_17>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee eb       	ldi	r30, 0xBE	; 190
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 30       	cpi	r26, 0x0C	; 12
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e0       	ldi	r26, 0x0C	; 12
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 31       	cpi	r26, 0x10	; 16
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	17 d0       	rcall	.+46     	; 0xf2 <main>
  c4:	fa c0       	rjmp	.+500    	; 0x2ba <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_init_slave>:
volatile uint8_t stringIndex = 0; // Index to keep track of received characters


void SPI_init_slave() {
	// Set MISO (Master In Slave Out) as output
	DDRB |= (1 << DDB4);
  c8:	bc 9a       	sbi	0x17, 4	; 23
	
	// Enable SPI, Set as Slave
	SPCR |= (1 << SPE);
  ca:	6e 9a       	sbi	0x0d, 6	; 13
	
	// Enable SPI interrupt
	SPCR |= (1 << SPIE);
  cc:	6f 9a       	sbi	0x0d, 7	; 13
  ce:	08 95       	ret

000000d0 <USART_Init>:
	return 0;
}
void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  d0:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
  d4:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN)|(1<<TXEN);
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS)|(3<<UCSZ0);
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  e0:	08 95       	ret

000000e2 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE)) )
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  e6:	8c b9       	out	0x0c, r24	; 12
  e8:	08 95       	ret

000000ea <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC)) )
  ea:	5f 9b       	sbis	0x0b, 7	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
  ee:	8c b1       	in	r24, 0x0c	; 12
}
  f0:	08 95       	ret

000000f2 <main>:
}


int main(void) {
	// Initialize SPI as a slave
	SPI_init_slave();
  f2:	ea df       	rcall	.-44     	; 0xc8 <SPI_init_slave>
	
	// Enable global interrupts
	sei();
  f4:	78 94       	sei
	DDRD|=(1<<7)|(1<<5)|(1<<6)|(1<<4);
  f6:	81 b3       	in	r24, 0x11	; 17
  f8:	80 6f       	ori	r24, 0xF0	; 240
  fa:	81 bb       	out	0x11, r24	; 17
	DDRF|=(1<<4)|(1<<5)|(1<<6)|(1<<3)|(1<<2)|(1<<1)|(1<<0);
  fc:	e1 e6       	ldi	r30, 0x61	; 97
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8f 67       	ori	r24, 0x7F	; 127
 104:	80 83       	st	Z, r24
	USART_Init ( MYUBRR );
 106:	87 e6       	ldi	r24, 0x67	; 103
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	e2 df       	rcall	.-60     	; 0xd0 <USART_Init>
				
			}
			if (receivedData == '0') {
				{
					PORTD &=~(1 << PD4);
					PORTF &=~  (1 << PF6);
 10c:	c2 e6       	ldi	r28, 0x62	; 98
	

	// Your main code goes here

	while (1) {
		char receivedData=USART_Receive();
 10e:	d0 e0       	ldi	r29, 0x00	; 0
		if (receivedData == 'L') {
 110:	ec df       	rcall	.-40     	; 0xea <USART_Receive>
 112:	8c 34       	cpi	r24, 0x4C	; 76
			receivedData = USART_Receive();
 114:	79 f4       	brne	.+30     	; 0x134 <main+0x42>
 116:	e9 df       	rcall	.-46     	; 0xea <USART_Receive>
			if (receivedData == '1') {
 118:	81 33       	cpi	r24, 0x31	; 49
 11a:	29 f4       	brne	.+10     	; 0x126 <main+0x34>
				PORTD |= (1 << PD6);
 11c:	96 9a       	sbi	0x12, 6	; 18
				PORTF |= (1 << PF3);
 11e:	88 81       	ld	r24, Y
 120:	88 60       	ori	r24, 0x08	; 8
 122:	88 83       	st	Y, r24
 124:	f5 cf       	rjmp	.-22     	; 0x110 <main+0x1e>
			}
			if (receivedData == '0') {
 126:	80 33       	cpi	r24, 0x30	; 48
 128:	99 f7       	brne	.-26     	; 0x110 <main+0x1e>
				PORTD &=~ (1 << PD6);
 12a:	96 98       	cbi	0x12, 6	; 18
				PORTF &=~ (1 << PF3);
 12c:	88 81       	ld	r24, Y
 12e:	87 7f       	andi	r24, 0xF7	; 247
 130:	88 83       	st	Y, r24
			}
		}
		else if (receivedData == 'T') {
 132:	ee cf       	rjmp	.-36     	; 0x110 <main+0x1e>
 134:	84 35       	cpi	r24, 0x54	; 84
			receivedData = USART_Receive();
 136:	79 f4       	brne	.+30     	; 0x156 <main+0x64>
 138:	d8 df       	rcall	.-80     	; 0xea <USART_Receive>
			if (receivedData == '1') {
 13a:	81 33       	cpi	r24, 0x31	; 49
 13c:	29 f4       	brne	.+10     	; 0x148 <main+0x56>
				PORTD |= (1 << PD5);
 13e:	95 9a       	sbi	0x12, 5	; 18
				PORTF |= (1 << PF4);
 140:	88 81       	ld	r24, Y
 142:	80 61       	ori	r24, 0x10	; 16
 144:	88 83       	st	Y, r24
 146:	e4 cf       	rjmp	.-56     	; 0x110 <main+0x1e>
			}
			if (receivedData == '0') {
 148:	80 33       	cpi	r24, 0x30	; 48
 14a:	11 f7       	brne	.-60     	; 0x110 <main+0x1e>
				PORTD &=~ (1 << PD5);
 14c:	95 98       	cbi	0x12, 5	; 18
				PORTF &=~(1 << PF4);
 14e:	88 81       	ld	r24, Y
 150:	8f 7e       	andi	r24, 0xEF	; 239
 152:	88 83       	st	Y, r24
			}
		}
		else if (receivedData == 'N') {
 154:	dd cf       	rjmp	.-70     	; 0x110 <main+0x1e>
 156:	8e 34       	cpi	r24, 0x4E	; 78
			receivedData = USART_Receive();
 158:	79 f4       	brne	.+30     	; 0x178 <main+0x86>
 15a:	c7 df       	rcall	.-114    	; 0xea <USART_Receive>
			if (receivedData == '1') {
 15c:	81 33       	cpi	r24, 0x31	; 49
 15e:	29 f4       	brne	.+10     	; 0x16a <main+0x78>
				PORTD |= (1 << PD7);
 160:	97 9a       	sbi	0x12, 7	; 18
				PORTF |= (1 << PF5);
 162:	88 81       	ld	r24, Y
 164:	80 62       	ori	r24, 0x20	; 32
 166:	88 83       	st	Y, r24
 168:	d3 cf       	rjmp	.-90     	; 0x110 <main+0x1e>
			}
			if (receivedData == '0') {
 16a:	80 33       	cpi	r24, 0x30	; 48
 16c:	89 f6       	brne	.-94     	; 0x110 <main+0x1e>
				PORTD &=~ (1 << PD7);
 16e:	97 98       	cbi	0x12, 7	; 18
				PORTF&=~ (1 << PF5);
 170:	88 81       	ld	r24, Y
 172:	8f 7d       	andi	r24, 0xDF	; 223
 174:	88 83       	st	Y, r24
			}
		}
		else if(receivedData == 'F')
 176:	cc cf       	rjmp	.-104    	; 0x110 <main+0x1e>
 178:	86 34       	cpi	r24, 0x46	; 70
		{
			receivedData = USART_Receive();
 17a:	51 f6       	brne	.-108    	; 0x110 <main+0x1e>
 17c:	b6 df       	rcall	.-148    	; 0xea <USART_Receive>
			if (receivedData == '1') {
 17e:	81 33       	cpi	r24, 0x31	; 49
 180:	29 f4       	brne	.+10     	; 0x18c <main+0x9a>
				
				PORTD |= (1 << PD4);
 182:	94 9a       	sbi	0x12, 4	; 18
				PORTF |= (1 << PF6);
 184:	88 81       	ld	r24, Y
 186:	80 64       	ori	r24, 0x40	; 64
 188:	88 83       	st	Y, r24
 18a:	c2 cf       	rjmp	.-124    	; 0x110 <main+0x1e>
				
			}
			if (receivedData == '0') {
 18c:	80 33       	cpi	r24, 0x30	; 48
 18e:	09 f0       	breq	.+2      	; 0x192 <main+0xa0>
 190:	bf cf       	rjmp	.-130    	; 0x110 <main+0x1e>
				{
					PORTD &=~(1 << PD4);
 192:	94 98       	cbi	0x12, 4	; 18
					PORTF &=~  (1 << PF6);
 194:	88 81       	ld	r24, Y
 196:	8f 7b       	andi	r24, 0xBF	; 191
 198:	88 83       	st	Y, r24
 19a:	ba cf       	rjmp	.-140    	; 0x110 <main+0x1e>

0000019c <str>:
	/* Get and return received data from buffer */
	return UDR0;
}
void str()
{
	if (strcmp(receivedString, "L1") == 0) {
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	71 e0       	ldi	r23, 0x01	; 1
 1a0:	8d e0       	ldi	r24, 0x0D	; 13
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	81 d0       	rcall	.+258    	; 0x2a8 <strcmp>
 1a6:	89 2b       	or	r24, r25
 1a8:	61 f4       	brne	.+24     	; 0x1c2 <str+0x26>
		PORTD ^= (1 << PD6);
 1aa:	92 b3       	in	r25, 0x12	; 18
 1ac:	80 e4       	ldi	r24, 0x40	; 64
 1ae:	89 27       	eor	r24, r25
 1b0:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF3);
 1b2:	e2 e6       	ldi	r30, 0x62	; 98
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	90 81       	ld	r25, Z
 1b8:	88 e0       	ldi	r24, 0x08	; 8
 1ba:	89 27       	eor	r24, r25
 1bc:	80 83       	st	Z, r24
		 USART_Transmit('A');
 1be:	81 e4       	ldi	r24, 0x41	; 65
 1c0:	90 df       	rcall	.-224    	; 0xe2 <USART_Transmit>
		
	}
	if (strcmp(receivedString, "L2") == 0) {
 1c2:	63 e0       	ldi	r22, 0x03	; 3
 1c4:	71 e0       	ldi	r23, 0x01	; 1
 1c6:	8d e0       	ldi	r24, 0x0D	; 13
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	6e d0       	rcall	.+220    	; 0x2a8 <strcmp>
 1cc:	89 2b       	or	r24, r25
 1ce:	61 f4       	brne	.+24     	; 0x1e8 <str+0x4c>
		PORTD ^= (1 << PD5);
 1d0:	92 b3       	in	r25, 0x12	; 18
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	89 27       	eor	r24, r25
 1d6:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF4);
 1d8:	e2 e6       	ldi	r30, 0x62	; 98
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	90 81       	ld	r25, Z
 1de:	80 e1       	ldi	r24, 0x10	; 16
 1e0:	89 27       	eor	r24, r25
		 USART_Transmit('B');
 1e2:	80 83       	st	Z, r24
 1e4:	82 e4       	ldi	r24, 0x42	; 66
 1e6:	7d df       	rcall	.-262    	; 0xe2 <USART_Transmit>
	}
	if (strcmp(receivedString, "L3") == 0) {
 1e8:	66 e0       	ldi	r22, 0x06	; 6
 1ea:	71 e0       	ldi	r23, 0x01	; 1
 1ec:	8d e0       	ldi	r24, 0x0D	; 13
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	5b d0       	rcall	.+182    	; 0x2a8 <strcmp>
 1f2:	89 2b       	or	r24, r25
 1f4:	59 f4       	brne	.+22     	; 0x20c <str+0x70>
		
		PORTD ^= (1 << PD7);
 1f6:	82 b3       	in	r24, 0x12	; 18
 1f8:	80 58       	subi	r24, 0x80	; 128
 1fa:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF5);
 1fc:	e2 e6       	ldi	r30, 0x62	; 98
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	90 81       	ld	r25, Z
 202:	80 e2       	ldi	r24, 0x20	; 32
 204:	89 27       	eor	r24, r25
		 USART_Transmit('C');	
 206:	80 83       	st	Z, r24
 208:	83 e4       	ldi	r24, 0x43	; 67
	}
	if (strcmp(receivedString, "F1") == 0) {
 20a:	6b df       	rcall	.-298    	; 0xe2 <USART_Transmit>
 20c:	69 e0       	ldi	r22, 0x09	; 9
 20e:	71 e0       	ldi	r23, 0x01	; 1
 210:	8d e0       	ldi	r24, 0x0D	; 13
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	49 d0       	rcall	.+146    	; 0x2a8 <strcmp>
 216:	89 2b       	or	r24, r25
 218:	61 f4       	brne	.+24     	; 0x232 <str+0x96>
	PORTD ^= (1 << PD4);
 21a:	92 b3       	in	r25, 0x12	; 18
 21c:	80 e1       	ldi	r24, 0x10	; 16
 21e:	89 27       	eor	r24, r25
 220:	82 bb       	out	0x12, r24	; 18
	PORTF ^= (1 << PF6);
 222:	e2 e6       	ldi	r30, 0x62	; 98
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	90 81       	ld	r25, Z
 228:	80 e4       	ldi	r24, 0x40	; 64
 22a:	89 27       	eor	r24, r25
		 USART_Transmit('D');
 22c:	80 83       	st	Z, r24
 22e:	84 e4       	ldi	r24, 0x44	; 68
 230:	58 cf       	rjmp	.-336    	; 0xe2 <USART_Transmit>
 232:	08 95       	ret

00000234 <__vector_17>:
	
	// Enable SPI interrupt
	SPCR |= (1 << SPIE);
}

ISR(SPI_STC_vect) {
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	0b b6       	in	r0, 0x3b	; 59
 240:	0f 92       	push	r0
 242:	2f 93       	push	r18
 244:	3f 93       	push	r19
 246:	4f 93       	push	r20
 248:	5f 93       	push	r21
 24a:	6f 93       	push	r22
 24c:	7f 93       	push	r23
 24e:	8f 93       	push	r24
 250:	9f 93       	push	r25
 252:	af 93       	push	r26
 254:	bf 93       	push	r27
 256:	ef 93       	push	r30
 258:	ff 93       	push	r31
	
	char receivedChar = SPDR;
 25a:	8f b1       	in	r24, 0x0f	; 15
	
	receivedString[stringIndex++] = receivedChar;
 25c:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	9e 0f       	add	r25, r30
 264:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__data_end>
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	e3 5f       	subi	r30, 0xF3	; 243
 26c:	fe 4f       	sbci	r31, 0xFE	; 254
 26e:	80 83       	st	Z, r24
	
	// Check if the end of the string is reached
	if (stringIndex == 2) {
 270:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	29 f4       	brne	.+10     	; 0x282 <__vector_17+0x4e>
		// Null-terminate the string
		receivedString[2] = '\0';
 278:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <receivedString+0x2>
		
		// Reset the index for the next string
		stringIndex = 0;
 27c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
		str();
 280:	8d df       	rcall	.-230    	; 0x19c <str>
		// Check if the received string is "L1"
		
	}
}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0b be       	out	0x3b, r0	; 59
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <strcmp>:
 2a8:	fb 01       	movw	r30, r22
 2aa:	dc 01       	movw	r26, r24
 2ac:	8d 91       	ld	r24, X+
 2ae:	01 90       	ld	r0, Z+
 2b0:	80 19       	sub	r24, r0
 2b2:	01 10       	cpse	r0, r1
 2b4:	d9 f3       	breq	.-10     	; 0x2ac <strcmp+0x4>
 2b6:	99 0b       	sbc	r25, r25
 2b8:	08 95       	ret

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
