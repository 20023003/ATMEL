
GccApplication7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000082d  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078e  00000000  00000000  00000a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000267  00000000  00000000  0000120b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f1  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000036  00000000  00000000  00001889  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  000018bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	02 d0       	rcall	.+4      	; 0xae <main>
  aa:	50 c0       	rjmp	.+160    	; 0x14c <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <main>:
#define LED PD4
int count=0;
int main()
{
	uint8_t timerOverflowCount=0;
	DDRD=0xff;         //configure PORTD as output
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	81 bb       	out	0x11, r24	; 17
	TCNT0=0x00;
  b2:	12 be       	out	0x32, r1	; 50
	TCCR0 = (1<<CS00) | (1<<CS02);
  b4:	85 e0       	ldi	r24, 0x05	; 5
  b6:	83 bf       	out	0x33, r24	; 51
#include<avr/io.h>
#define LED PD4
int count=0;
int main()
{
	uint8_t timerOverflowCount=0;
  b8:	20 e0       	ldi	r18, 0x00	; 0
	
	while(1)
	{
		while ((TIFR & 0x01) == 0);
		TCNT0 = 0x00;
		TIFR=0x01; //clear timer1 overflow flag
  ba:	31 e0       	ldi	r19, 0x01	; 1
		{
			count++;
			
			timerOverflowCount=0;
		}
		if(count%10==0)
  bc:	ea e0       	ldi	r30, 0x0A	; 10
  be:	f0 e0       	ldi	r31, 0x00	; 0
		{
			PORTD ^= (1 << LED);
  c0:	40 e1       	ldi	r20, 0x10	; 16
	TCNT0=0x00;
	TCCR0 = (1<<CS00) | (1<<CS02);
	
	while(1)
	{
		while ((TIFR & 0x01) == 0);
  c2:	06 b6       	in	r0, 0x36	; 54
  c4:	00 fe       	sbrs	r0, 0
  c6:	fd cf       	rjmp	.-6      	; 0xc2 <main+0x14>
		TCNT0 = 0x00;
  c8:	12 be       	out	0x32, r1	; 50
		TIFR=0x01; //clear timer1 overflow flag
  ca:	36 bf       	out	0x36, r19	; 54
		timerOverflowCount++;
  cc:	2f 5f       	subi	r18, 0xFF	; 255
		if (timerOverflowCount>=60)
  ce:	2c 33       	cpi	r18, 0x3C	; 60
  d0:	50 f0       	brcs	.+20     	; 0xe6 <main+0x38>
		{
			count++;
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			timerOverflowCount=0;
  e4:	20 e0       	ldi	r18, 0x00	; 0
		}
		if(count%10==0)
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  ee:	bf 01       	movw	r22, r30
  f0:	06 d0       	rcall	.+12     	; 0xfe <__divmodhi4>
  f2:	89 2b       	or	r24, r25
  f4:	31 f7       	brne	.-52     	; 0xc2 <main+0x14>
		{
			PORTD ^= (1 << LED);
  f6:	82 b3       	in	r24, 0x12	; 18
  f8:	84 27       	eor	r24, r20
  fa:	82 bb       	out	0x12, r24	; 18
  fc:	e2 cf       	rjmp	.-60     	; 0xc2 <main+0x14>

000000fe <__divmodhi4>:
  fe:	97 fb       	bst	r25, 7
 100:	07 2e       	mov	r0, r23
 102:	16 f4       	brtc	.+4      	; 0x108 <__divmodhi4+0xa>
 104:	00 94       	com	r0
 106:	06 d0       	rcall	.+12     	; 0x114 <__divmodhi4_neg1>
 108:	77 fd       	sbrc	r23, 7
 10a:	08 d0       	rcall	.+16     	; 0x11c <__divmodhi4_neg2>
 10c:	0b d0       	rcall	.+22     	; 0x124 <__udivmodhi4>
 10e:	07 fc       	sbrc	r0, 7
 110:	05 d0       	rcall	.+10     	; 0x11c <__divmodhi4_neg2>
 112:	3e f4       	brtc	.+14     	; 0x122 <__divmodhi4_exit>

00000114 <__divmodhi4_neg1>:
 114:	90 95       	com	r25
 116:	81 95       	neg	r24
 118:	9f 4f       	sbci	r25, 0xFF	; 255
 11a:	08 95       	ret

0000011c <__divmodhi4_neg2>:
 11c:	70 95       	com	r23
 11e:	61 95       	neg	r22
 120:	7f 4f       	sbci	r23, 0xFF	; 255

00000122 <__divmodhi4_exit>:
 122:	08 95       	ret

00000124 <__udivmodhi4>:
 124:	aa 1b       	sub	r26, r26
 126:	bb 1b       	sub	r27, r27
 128:	51 e1       	ldi	r21, 0x11	; 17
 12a:	07 c0       	rjmp	.+14     	; 0x13a <__udivmodhi4_ep>

0000012c <__udivmodhi4_loop>:
 12c:	aa 1f       	adc	r26, r26
 12e:	bb 1f       	adc	r27, r27
 130:	a6 17       	cp	r26, r22
 132:	b7 07       	cpc	r27, r23
 134:	10 f0       	brcs	.+4      	; 0x13a <__udivmodhi4_ep>
 136:	a6 1b       	sub	r26, r22
 138:	b7 0b       	sbc	r27, r23

0000013a <__udivmodhi4_ep>:
 13a:	88 1f       	adc	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	5a 95       	dec	r21
 140:	a9 f7       	brne	.-22     	; 0x12c <__udivmodhi4_loop>
 142:	80 95       	com	r24
 144:	90 95       	com	r25
 146:	bc 01       	movw	r22, r24
 148:	cd 01       	movw	r24, r26
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
