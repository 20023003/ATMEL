
tworeceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001b2  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800106  00800106  0000024c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000944  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000853  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b9  00000000  00000000  0000148b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001744  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000423  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ea  00000000  00000000  00001c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001ced  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	71 c0       	rjmp	.+226    	; 0x128 <__vector_17>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 30       	cpi	r26, 0x0A	; 10
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	06 d0       	rcall	.+12     	; 0xd0 <main>
  c4:	74 c0       	rjmp	.+232    	; 0x1ae <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_init_slave>:
volatile char receivedString[3]; // Buffer to store received string
volatile uint8_t stringIndex = 0; // Index to keep track of received characters

void SPI_init_slave() {
	// Set MISO (Master In Slave Out) as output
	DDRB |= (1 << DDB4);
  c8:	bc 9a       	sbi	0x17, 4	; 23
	
	// Enable SPI, Set as Slave
	SPCR |= (1 << SPE);
  ca:	6e 9a       	sbi	0x0d, 6	; 13
	
	// Enable SPI interrupt
	SPCR |= (1 << SPIE);
  cc:	6f 9a       	sbi	0x0d, 7	; 13
  ce:	08 95       	ret

000000d0 <main>:
	}
}

int main(void) {
	// Initialize SPI as a slave
	SPI_init_slave();
  d0:	fb df       	rcall	.-10     	; 0xc8 <SPI_init_slave>
	
	// Enable global interrupts
	sei();
  d2:	78 94       	sei
	DDRD|=(1<<7)|(1<<5);
  d4:	81 b3       	in	r24, 0x11	; 17
  d6:	80 6a       	ori	r24, 0xA0	; 160
  d8:	81 bb       	out	0x11, r24	; 17
	DDRF|=(1<<4)|(1<<5);
  da:	e1 e6       	ldi	r30, 0x61	; 97
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 63       	ori	r24, 0x30	; 48
  e2:	80 83       	st	Z, r24
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <main+0x14>

000000e6 <str>:
	
	return 0;
}
void str()
{
	if (strcmp(receivedString, "L1") == 0) {
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	71 e0       	ldi	r23, 0x01	; 1
  ea:	87 e0       	ldi	r24, 0x07	; 7
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	56 d0       	rcall	.+172    	; 0x19c <strcmp>
  f0:	89 2b       	or	r24, r25
  f2:	49 f4       	brne	.+18     	; 0x106 <str+0x20>
		// Toggle an output pin to control the relay
		// Assuming the relay is connected to, for example, PORTD pin 7
		PORTD ^= (1 << PD7);
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	80 58       	subi	r24, 0x80	; 128
  f8:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF4);
  fa:	e2 e6       	ldi	r30, 0x62	; 98
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	80 e1       	ldi	r24, 0x10	; 16
 102:	89 27       	eor	r24, r25
 104:	80 83       	st	Z, r24
	}
	if (strcmp(receivedString, "L2") == 0) {
 106:	63 e0       	ldi	r22, 0x03	; 3
 108:	71 e0       	ldi	r23, 0x01	; 1
 10a:	87 e0       	ldi	r24, 0x07	; 7
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	46 d0       	rcall	.+140    	; 0x19c <strcmp>
 110:	89 2b       	or	r24, r25
 112:	49 f4       	brne	.+18     	; 0x126 <str+0x40>
		// Toggle an output pin to control the relay
		// Assuming the relay is connected to, for example, PORTD pin 7
		PORTD ^= (1 << PD5);
 114:	92 b3       	in	r25, 0x12	; 18
 116:	80 e2       	ldi	r24, 0x20	; 32
 118:	98 27       	eor	r25, r24
 11a:	92 bb       	out	0x12, r25	; 18
		PORTF ^= (1 << PF5);
 11c:	e2 e6       	ldi	r30, 0x62	; 98
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	90 81       	ld	r25, Z
 122:	89 27       	eor	r24, r25
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <__vector_17>:
	
	// Enable SPI interrupt
	SPCR |= (1 << SPIE);
}

ISR(SPI_STC_vect) {
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	0b b6       	in	r0, 0x3b	; 59
 134:	0f 92       	push	r0
 136:	2f 93       	push	r18
 138:	3f 93       	push	r19
 13a:	4f 93       	push	r20
 13c:	5f 93       	push	r21
 13e:	6f 93       	push	r22
 140:	7f 93       	push	r23
 142:	8f 93       	push	r24
 144:	9f 93       	push	r25
 146:	af 93       	push	r26
 148:	bf 93       	push	r27
 14a:	ef 93       	push	r30
 14c:	ff 93       	push	r31
	// SPI Transfer Complete interrupt vector
	
	// Read received data from SPI data register
	char receivedChar = SPDR;
 14e:	8f b1       	in	r24, 0x0f	; 15
	
	// Store the received character in the buffer
	receivedString[stringIndex++] = receivedChar;
 150:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	9e 0f       	add	r25, r30
 158:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end>
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	e9 5f       	subi	r30, 0xF9	; 249
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	80 83       	st	Z, r24
	
	// Check if the end of the string is reached
	if (stringIndex == 2) {
 164:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	29 f4       	brne	.+10     	; 0x176 <__vector_17+0x4e>
		// Null-terminate the string
		receivedString[2] = '\0';
 16c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <receivedString+0x2>
		
		// Reset the index for the next string
		stringIndex = 0;
 170:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		str();
 174:	b8 df       	rcall	.-144    	; 0xe6 <str>
		// Check if the received string is "L1"
		
	}
}
 176:	ff 91       	pop	r31
 178:	ef 91       	pop	r30
 17a:	bf 91       	pop	r27
 17c:	af 91       	pop	r26
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	7f 91       	pop	r23
 184:	6f 91       	pop	r22
 186:	5f 91       	pop	r21
 188:	4f 91       	pop	r20
 18a:	3f 91       	pop	r19
 18c:	2f 91       	pop	r18
 18e:	0f 90       	pop	r0
 190:	0b be       	out	0x3b, r0	; 59
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <strcmp>:
 19c:	fb 01       	movw	r30, r22
 19e:	dc 01       	movw	r26, r24
 1a0:	8d 91       	ld	r24, X+
 1a2:	01 90       	ld	r0, Z+
 1a4:	80 19       	sub	r24, r0
 1a6:	01 10       	cpse	r0, r1
 1a8:	d9 f3       	breq	.-10     	; 0x1a0 <strcmp+0x4>
 1aa:	99 0b       	sbc	r25, r25
 1ac:	08 95       	ret

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
