
SIMPLETRANSMITTERFORTOUCH1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000002c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000338  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000145e  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd2  00000000  00000000  0000189e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000771  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  00002ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000876  00000000  00000000  00002ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003eb  00000000  00000000  0000371a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003b05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_19>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e4 e5       	ldi	r30, 0x54	; 84
  e0:	f2 e0       	ldi	r31, 0x02	; 2
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a0 30       	cpi	r26, 0x00	; 0
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a0 e0       	ldi	r26, 0x00	; 0
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a7 30       	cpi	r26, 0x07	; 7
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 88 00 	call	0x110	; 0x110 <main>
 102:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 10a:	0e 94 94 00 	call	0x128	; 0x128 <system_init>
 10e:	08 95       	ret

00000110 <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 110:	0e 94 85 00 	call	0x10a	; 0x10a <atmel_start_init>
 114:	ff cf       	rjmp	.-2      	; 0x114 <main+0x4>

00000116 <SPI_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
 116:	26 98       	cbi	0x04, 6	; 4
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
 118:	2e 98       	cbi	0x05, 6	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 11a:	25 9a       	sbi	0x04, 5	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 11c:	2d 98       	cbi	0x05, 5	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRB |= 1 << pin;
 11e:	27 9a       	sbi	0x04, 7	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTB |= 1 << pin;
	} else {
		PORTB &= ~(1 << pin);
 120:	2f 98       	cbi	0x05, 7	; 5
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	SPI_0_init();
 122:	0e 94 c5 00 	call	0x18a	; 0x18a <SPI_0_init>
 126:	08 95       	ret

00000128 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTIM4) | (1 << PRTIM3);
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
	       | (1 << PRADC) | (1 << PRSPI0);

	PRR2 = (1 << PRUSART2) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTWI1);
 134:	9f e0       	ldi	r25, 0x0F	; 15
 136:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f8063>
		break;
	case PORT_DIR_OUT:
		DDRA |= mask;
		break;
	case PORT_DIR_OFF:
		DDRA &= ~mask;
 13a:	91 b1       	in	r25, 0x01	; 1
 13c:	11 b8       	out	0x01, r1	; 1

		PORTA |= mask;
 13e:	92 b1       	in	r25, 0x02	; 2
 140:	82 b9       	out	0x02, r24	; 2
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 142:	94 b1       	in	r25, 0x04	; 4
 144:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 146:	95 b1       	in	r25, 0x05	; 5
 148:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 14a:	97 b1       	in	r25, 0x07	; 7
 14c:	17 b8       	out	0x07, r1	; 7

		PORTC |= mask;
 14e:	98 b1       	in	r25, 0x08	; 8
 150:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 152:	9a b1       	in	r25, 0x0a	; 10
 154:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 156:	9b b1       	in	r25, 0x0b	; 11
 158:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 15a:	8d b1       	in	r24, 0x0d	; 13
 15c:	80 78       	andi	r24, 0x80	; 128
 15e:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 160:	8e b1       	in	r24, 0x0e	; 14
 162:	8f 67       	ori	r24, 0x7F	; 127
 164:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	60 e8       	ldi	r22, 0x80	; 128
 16a:	81 e6       	ldi	r24, 0x61	; 97
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 be 00 	call	0x17c	; 0x17c <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 172:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 174:	15 be       	out	0x35, r1	; 53
{
	mcu_init();

	sysctrl_init();

	SPI_0_initialization();
 176:	0e 94 8b 00 	call	0x116	; 0x116 <SPI_0_initialization>
 17a:	08 95       	ret

0000017c <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 17c:	2f b7       	in	r18, 0x3f	; 63
	cli
 17e:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 180:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 182:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 184:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 186:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 188:	08 95       	ret

0000018a <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
 18a:	e4 e6       	ldi	r30, 0x64	; 100
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	8b 7f       	andi	r24, 0xFB	; 251
 192:	80 83       	st	Z, r24
 194:	80 ed       	ldi	r24, 0xD0	; 208
 196:	8c bd       	out	0x2c, r24	; 44
 198:	e0 e0       	ldi	r30, 0x00	; 0
 19a:	f1 e0       	ldi	r31, 0x01	; 1
 19c:	10 82       	st	Z, r1
 19e:	16 82       	std	Z+6, r1	; 0x06
 1a0:	15 82       	std	Z+5, r1	; 0x05
 1a2:	08 95       	ret

000001a4 <__vector_19>:
}

ISR(SPI0_STC_vect)
{
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	2f 93       	push	r18
 1b0:	3f 93       	push	r19
 1b2:	4f 93       	push	r20
 1b4:	5f 93       	push	r21
 1b6:	6f 93       	push	r22
 1b8:	7f 93       	push	r23
 1ba:	8f 93       	push	r24
 1bc:	9f 93       	push	r25
 1be:	af 93       	push	r26
 1c0:	bf 93       	push	r27
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	ef 93       	push	r30
 1c8:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR0;
 1ca:	9e b5       	in	r25, 0x2e	; 46
	uint8_t wdata = 0;

	if (SPI_0_desc.type != SPI_WRITE) {
 1cc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	11 f1       	breq	.+68     	; 0x218 <__vector_19+0x74>
		*SPI_0_desc.data = rdata;
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	d1 e0       	ldi	r29, 0x01	; 1
 1d8:	a9 81       	ldd	r26, Y+1	; 0x01
 1da:	ba 81       	ldd	r27, Y+2	; 0x02
 1dc:	fd 01       	movw	r30, r26
 1de:	91 93       	st	Z+, r25
	}

	SPI_0_desc.data++;
 1e0:	fa 83       	std	Y+2, r31	; 0x02
 1e2:	e9 83       	std	Y+1, r30	; 0x01

	if (SPI_0_desc.type != SPI_READ)
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	19 f0       	breq	.+6      	; 0x1ee <__vector_19+0x4a>
		wdata = *SPI_0_desc.data;
 1e8:	11 96       	adiw	r26, 0x01	; 1
 1ea:	9c 91       	ld	r25, X
 1ec:	01 c0       	rjmp	.+2      	; 0x1f0 <__vector_19+0x4c>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR0;
	uint8_t wdata = 0;
 1ee:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
 1f0:	e0 e0       	ldi	r30, 0x00	; 0
 1f2:	f1 e0       	ldi	r31, 0x01	; 1
 1f4:	83 81       	ldd	r24, Z+3	; 0x03
 1f6:	81 50       	subi	r24, 0x01	; 1
 1f8:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
 1fa:	88 23       	and	r24, r24
 1fc:	11 f0       	breq	.+4      	; 0x202 <__vector_19+0x5e>
		// more data to send, send a byte
		SPDR0 = wdata;
 1fe:	9e bd       	out	0x2e, r25	; 46
 200:	14 c0       	rjmp	.+40     	; 0x22a <__vector_19+0x86>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
 202:	e0 e0       	ldi	r30, 0x00	; 0
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
 20a:	05 80       	ldd	r0, Z+5	; 0x05
 20c:	f6 81       	ldd	r31, Z+6	; 0x06
 20e:	e0 2d       	mov	r30, r0
 210:	30 97       	sbiw	r30, 0x00	; 0
 212:	59 f0       	breq	.+22     	; 0x22a <__vector_19+0x86>
			SPI_0_desc.cb();
 214:	09 95       	icall
		}
	}
}
 216:	09 c0       	rjmp	.+18     	; 0x22a <__vector_19+0x86>

	if (SPI_0_desc.type != SPI_WRITE) {
		*SPI_0_desc.data = rdata;
	}

	SPI_0_desc.data++;
 218:	e0 e0       	ldi	r30, 0x00	; 0
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	a1 81       	ldd	r26, Z+1	; 0x01
 21e:	b2 81       	ldd	r27, Z+2	; 0x02
 220:	cd 01       	movw	r24, r26
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	92 83       	std	Z+2, r25	; 0x02
 226:	81 83       	std	Z+1, r24	; 0x01
 228:	df cf       	rjmp	.-66     	; 0x1e8 <__vector_19+0x44>
		SPI_0_desc.status = SPI_DONE;
		if (SPI_0_desc.cb != NULL) {
			SPI_0_desc.cb();
		}
	}
}
 22a:	ff 91       	pop	r31
 22c:	ef 91       	pop	r30
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	bf 91       	pop	r27
 234:	af 91       	pop	r26
 236:	9f 91       	pop	r25
 238:	8f 91       	pop	r24
 23a:	7f 91       	pop	r23
 23c:	6f 91       	pop	r22
 23e:	5f 91       	pop	r21
 240:	4f 91       	pop	r20
 242:	3f 91       	pop	r19
 244:	2f 91       	pop	r18
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
