
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000003b2  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800110  00800110  00000456  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000456  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000488  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e4  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000864  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000488  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042b  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ea  00000000  00000000  00002097  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00002181  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	71 c1       	rjmp	.+738    	; 0x328 <__vector_17>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 eb       	ldi	r30, 0xB2	; 178
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 31       	cpi	r26, 0x18	; 24
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	06 d0       	rcall	.+12     	; 0xd0 <main>
  c4:	74 c1       	rjmp	.+744    	; 0x3ae <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_init_slave>:
volatile uint8_t stringIndex = 0; // Index to keep track of received characters


void SPI_init_slave() {
	// Set MISO (Master In Slave Out) as output
	DDRB |= (1 << DDB4);
  c8:	bc 9a       	sbi	0x17, 4	; 23
	
	// Enable SPI, Set as Slave
	SPCR |= (1 << SPE);
  ca:	6e 9a       	sbi	0x0d, 6	; 13
	
	// Enable SPI interrupt
	SPCR |= (1 << SPIE);
  cc:	6f 9a       	sbi	0x0d, 7	; 13
  ce:	08 95       	ret

000000d0 <main>:
}


int main(void) {
	// Initialize SPI as a slave
	SPI_init_slave();
  d0:	fb df       	rcall	.-10     	; 0xc8 <SPI_init_slave>
	
	// Enable global interrupts
	sei();
  d2:	78 94       	sei
	DDRD|=(1<<7)|(1<<5)|(1<<6)|(1<<4);
  d4:	81 b3       	in	r24, 0x11	; 17
  d6:	80 6f       	ori	r24, 0xF0	; 240
  d8:	81 bb       	out	0x11, r24	; 17
	DDRF|=(1<<4)|(1<<5)|(1<<6)|(1<<3)|(1<<2)|(1<<1)|(1<<0);
  da:	e1 e6       	ldi	r30, 0x61	; 97
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8f 67       	ori	r24, 0x7F	; 127
  e2:	80 83       	st	Z, r24
	DDRC|=(1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0)|(1<<6)|(1<<7);
  e4:	84 b3       	in	r24, 0x14	; 20
  e6:	8f 6d       	ori	r24, 0xDF	; 223
  e8:	84 bb       	out	0x14, r24	; 20
	PORTC=(1<<7);
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x1e>

000000f0 <str>:

	
	return 0;
}
void str()
{ if (receivedString[0] == 'L' && receivedString[1] == '1') {
  f0:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <receivedString>
  f4:	8c 34       	cpi	r24, 0x4C	; 76
  f6:	69 f4       	brne	.+26     	; 0x112 <str+0x22>
  f8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <receivedString+0x1>
  fc:	81 33       	cpi	r24, 0x31	; 49
  fe:	49 f4       	brne	.+18     	; 0x112 <str+0x22>
	PORTD ^= (1 << PD4);
 100:	92 b3       	in	r25, 0x12	; 18
 102:	80 e1       	ldi	r24, 0x10	; 16
 104:	89 27       	eor	r24, r25
 106:	82 bb       	out	0x12, r24	; 18
	// Set PE0 high
	PORTF |= (1 << PF6);
 108:	e2 e6       	ldi	r30, 0x62	; 98
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	80 64       	ori	r24, 0x40	; 64
 110:	80 83       	st	Z, r24
}
	if (strcmp(receivedString, "L2") == 0) {
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	71 e0       	ldi	r23, 0x01	; 1
 116:	85 e1       	ldi	r24, 0x15	; 21
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	40 d1       	rcall	.+640    	; 0x39c <strcmp>
 11c:	89 2b       	or	r24, r25
 11e:	49 f4       	brne	.+18     	; 0x132 <str+0x42>
		// Toggle an output pin to control the relay
		// Assuming the relay is connected to, for example, PORTD pin 7
		PORTD ^= (1 << PD5);
 120:	92 b3       	in	r25, 0x12	; 18
 122:	80 e2       	ldi	r24, 0x20	; 32
 124:	98 27       	eor	r25, r24
 126:	92 bb       	out	0x12, r25	; 18
		PORTF ^= (1 << PF5);
 128:	e2 e6       	ldi	r30, 0x62	; 98
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	90 81       	ld	r25, Z
 12e:	89 27       	eor	r24, r25
 130:	80 83       	st	Z, r24
	}
	if (strcmp(receivedString, "L3") == 0) {
 132:	63 e0       	ldi	r22, 0x03	; 3
 134:	71 e0       	ldi	r23, 0x01	; 1
 136:	85 e1       	ldi	r24, 0x15	; 21
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	30 d1       	rcall	.+608    	; 0x39c <strcmp>
 13c:	89 2b       	or	r24, r25
 13e:	51 f4       	brne	.+20     	; 0x154 <str+0x64>
		// Toggle an output pin to control the relay
		// Assuming the relay is connected to, for example, PORTD pin 7
		PORTD ^= (1 << PD4);
 140:	92 b3       	in	r25, 0x12	; 18
 142:	80 e1       	ldi	r24, 0x10	; 16
 144:	89 27       	eor	r24, r25
 146:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF6);
 148:	e2 e6       	ldi	r30, 0x62	; 98
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	90 81       	ld	r25, Z
 14e:	80 e4       	ldi	r24, 0x40	; 64
 150:	89 27       	eor	r24, r25
 152:	80 83       	st	Z, r24
	}
	if (strcmp(receivedString, "F1") == 0) {
 154:	66 e0       	ldi	r22, 0x06	; 6
 156:	71 e0       	ldi	r23, 0x01	; 1
 158:	85 e1       	ldi	r24, 0x15	; 21
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	1f d1       	rcall	.+574    	; 0x39c <strcmp>
 15e:	89 2b       	or	r24, r25
 160:	31 f5       	brne	.+76     	; 0x1ae <str+0xbe>
		f++;
 162:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <f>
 166:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <f+0x1>
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <f+0x1>
 170:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <f>
		if(f%2==1)
 174:	81 70       	andi	r24, 0x01	; 1
 176:	90 78       	andi	r25, 0x80	; 128
 178:	99 23       	and	r25, r25
 17a:	24 f4       	brge	.+8      	; 0x184 <str+0x94>
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	8e 6f       	ori	r24, 0xFE	; 254
 180:	9f 6f       	ori	r25, 0xFF	; 255
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	41 f4       	brne	.+16     	; 0x198 <str+0xa8>
		{
			PORTD |= (1 << PD6);
 188:	96 9a       	sbi	0x12, 6	; 18
			PORTC |= (1 << PC4);
 18a:	ac 9a       	sbi	0x15, 4	; 21
			spd=1;
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <spd+0x1>
 194:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <spd>
		}
		if(f%2==0)
 198:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <f>
 19c:	80 fd       	sbrc	r24, 0
 19e:	07 c0       	rjmp	.+14     	; 0x1ae <str+0xbe>
		{
			PORTD &=~ (1 << PD6);
 1a0:	96 98       	cbi	0x12, 6	; 18
			PORTC &=~ (1 << PC4);
 1a2:	ac 98       	cbi	0x15, 4	; 21
			spd=0;
 1a4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <spd+0x1>
 1a8:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <spd>
 1ac:	2c c0       	rjmp	.+88     	; 0x206 <str+0x116>
		}
	}
	if (strcmp(receivedString, "U1") == 0) {
 1ae:	6c e0       	ldi	r22, 0x0C	; 12
 1b0:	71 e0       	ldi	r23, 0x01	; 1
 1b2:	85 e1       	ldi	r24, 0x15	; 21
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	f2 d0       	rcall	.+484    	; 0x39c <strcmp>
 1b8:	89 2b       	or	r24, r25
 1ba:	79 f4       	brne	.+30     	; 0x1da <str+0xea>
		if(spd>=1&&spd<=4)
 1bc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <spd>
 1c0:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <spd+0x1>
 1c4:	9c 01       	movw	r18, r24
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	31 09       	sbc	r19, r1
 1ca:	24 30       	cpi	r18, 0x04	; 4
 1cc:	31 05       	cpc	r19, r1
 1ce:	28 f4       	brcc	.+10     	; 0x1da <str+0xea>
		{
			spd++;
 1d0:	01 96       	adiw	r24, 0x01	; 1
 1d2:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <spd+0x1>
 1d6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <spd>
		}
		
		
	}
	if (strcmp(receivedString, "D1") == 0) {
 1da:	69 e0       	ldi	r22, 0x09	; 9
 1dc:	71 e0       	ldi	r23, 0x01	; 1
 1de:	85 e1       	ldi	r24, 0x15	; 21
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	dc d0       	rcall	.+440    	; 0x39c <strcmp>
 1e4:	89 2b       	or	r24, r25
 1e6:	79 f4       	brne	.+30     	; 0x206 <str+0x116>
		if(spd>=2&&spd<=5)
 1e8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <spd>
 1ec:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <spd+0x1>
 1f0:	9c 01       	movw	r18, r24
 1f2:	22 50       	subi	r18, 0x02	; 2
 1f4:	31 09       	sbc	r19, r1
 1f6:	24 30       	cpi	r18, 0x04	; 4
 1f8:	31 05       	cpc	r19, r1
 1fa:	28 f4       	brcc	.+10     	; 0x206 <str+0x116>
		{
			spd--;
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <spd+0x1>
 202:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <spd>
		}
	}
	if(spd==0)
 206:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <spd>
 20a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <spd+0x1>
 20e:	89 2b       	or	r24, r25
 210:	91 f4       	brne	.+36     	; 0x236 <str+0x146>
	{
		PORTF&=~(1 << PF0);
 212:	e2 e6       	ldi	r30, 0x62	; 98
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	8e 7f       	andi	r24, 0xFE	; 254
 21a:	80 83       	st	Z, r24
		PORTF&=~(1 << PF1);
 21c:	80 81       	ld	r24, Z
 21e:	8d 7f       	andi	r24, 0xFD	; 253
 220:	80 83       	st	Z, r24
		PORTF&=~(1 << PF2);
 222:	80 81       	ld	r24, Z
 224:	8b 7f       	andi	r24, 0xFB	; 251
 226:	80 83       	st	Z, r24
		PORTF&=~(1 << PF3);
 228:	80 81       	ld	r24, Z
 22a:	87 7f       	andi	r24, 0xF7	; 247
 22c:	80 83       	st	Z, r24
		//FAN LEDS
		PORTC&=~(1<<3);
 22e:	ab 98       	cbi	0x15, 3	; 21
		PORTC&=~(1<<2);
 230:	aa 98       	cbi	0x15, 2	; 21
		PORTC&=~(1<<1);
 232:	a9 98       	cbi	0x15, 1	; 21
		PORTC&=~(1<<0);
 234:	a8 98       	cbi	0x15, 0	; 21
	}
	if(spd==1)
 236:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <spd>
 23a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <spd+0x1>
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	91 f4       	brne	.+36     	; 0x266 <str+0x176>
	{
		PORTF&=~(1 << PF0);
 242:	e2 e6       	ldi	r30, 0x62	; 98
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	8e 7f       	andi	r24, 0xFE	; 254
 24a:	80 83       	st	Z, r24
		PORTF&=~(1 << PF1);
 24c:	80 81       	ld	r24, Z
 24e:	8d 7f       	andi	r24, 0xFD	; 253
 250:	80 83       	st	Z, r24
		PORTF|= (1 << PF2);
 252:	80 81       	ld	r24, Z
 254:	84 60       	ori	r24, 0x04	; 4
 256:	80 83       	st	Z, r24
		PORTF&=~(1 << PF3);
 258:	80 81       	ld	r24, Z
 25a:	87 7f       	andi	r24, 0xF7	; 247
 25c:	80 83       	st	Z, r24
		//FAN LEDS
		PORTC&=~(1<<3);
 25e:	ab 98       	cbi	0x15, 3	; 21
		PORTC&=~(1<<2);
 260:	aa 98       	cbi	0x15, 2	; 21
		PORTC&=~(1<<1);
 262:	a9 98       	cbi	0x15, 1	; 21
		PORTC&=~(1<<0);
 264:	a8 98       	cbi	0x15, 0	; 21
	}
	if(spd==2)
 266:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <spd>
 26a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <spd+0x1>
 26e:	02 97       	sbiw	r24, 0x02	; 2
 270:	91 f4       	brne	.+36     	; 0x296 <str+0x1a6>
	{
		PORTF&=~(1 << PF0);
 272:	e2 e6       	ldi	r30, 0x62	; 98
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	8e 7f       	andi	r24, 0xFE	; 254
 27a:	80 83       	st	Z, r24
		PORTF|= (1 << PF1);
 27c:	80 81       	ld	r24, Z
 27e:	82 60       	ori	r24, 0x02	; 2
 280:	80 83       	st	Z, r24
		PORTF&=~ (1 << PF2);
 282:	80 81       	ld	r24, Z
 284:	8b 7f       	andi	r24, 0xFB	; 251
 286:	80 83       	st	Z, r24
		PORTF&=~(1 << PF3);
 288:	80 81       	ld	r24, Z
 28a:	87 7f       	andi	r24, 0xF7	; 247
 28c:	80 83       	st	Z, r24
		//FAN LEDS
		PORTC|= (1<<3);
 28e:	ab 9a       	sbi	0x15, 3	; 21
		PORTC&=~(1<<2);
 290:	aa 98       	cbi	0x15, 2	; 21
		PORTC&=~(1<<1);
 292:	a9 98       	cbi	0x15, 1	; 21
		PORTC&=~(1<<0);
 294:	a8 98       	cbi	0x15, 0	; 21
	}
	if(spd==3)
 296:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <spd>
 29a:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <spd+0x1>
 29e:	03 97       	sbiw	r24, 0x03	; 3
 2a0:	91 f4       	brne	.+36     	; 0x2c6 <str+0x1d6>
	{
		PORTF|= (1 << PF0);
 2a2:	e2 e6       	ldi	r30, 0x62	; 98
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	81 60       	ori	r24, 0x01	; 1
 2aa:	80 83       	st	Z, r24
		PORTF&=~(1 << PF1);
 2ac:	80 81       	ld	r24, Z
 2ae:	8d 7f       	andi	r24, 0xFD	; 253
 2b0:	80 83       	st	Z, r24
		PORTF&=~ (1 << PF2);
 2b2:	80 81       	ld	r24, Z
 2b4:	8b 7f       	andi	r24, 0xFB	; 251
 2b6:	80 83       	st	Z, r24
		PORTF&=~(1 << PF3);
 2b8:	80 81       	ld	r24, Z
 2ba:	87 7f       	andi	r24, 0xF7	; 247
 2bc:	80 83       	st	Z, r24
		//FAN LEDS
		PORTC|= (1<<3);
 2be:	ab 9a       	sbi	0x15, 3	; 21
		PORTC|= (1<<2);
 2c0:	aa 9a       	sbi	0x15, 2	; 21
		PORTC&=~(1<<1);
 2c2:	a9 98       	cbi	0x15, 1	; 21
		PORTC&=~(1<<0);
 2c4:	a8 98       	cbi	0x15, 0	; 21
		
	}
	if(spd==4)
 2c6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <spd>
 2ca:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <spd+0x1>
 2ce:	04 97       	sbiw	r24, 0x04	; 4
 2d0:	91 f4       	brne	.+36     	; 0x2f6 <str+0x206>
	{
		PORTF&=~(1 << PF0);
 2d2:	e2 e6       	ldi	r30, 0x62	; 98
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	8e 7f       	andi	r24, 0xFE	; 254
 2da:	80 83       	st	Z, r24
		PORTF|= (1 << PF1);
 2dc:	80 81       	ld	r24, Z
 2de:	82 60       	ori	r24, 0x02	; 2
 2e0:	80 83       	st	Z, r24
		PORTF|=  (1 << PF2);
 2e2:	80 81       	ld	r24, Z
 2e4:	84 60       	ori	r24, 0x04	; 4
 2e6:	80 83       	st	Z, r24
		PORTF&=~(1 << PF3);
 2e8:	80 81       	ld	r24, Z
 2ea:	87 7f       	andi	r24, 0xF7	; 247
 2ec:	80 83       	st	Z, r24
		//FAN LEDS
		PORTC|= (1<<3);
 2ee:	ab 9a       	sbi	0x15, 3	; 21
		PORTC|= (1<<2);
 2f0:	aa 9a       	sbi	0x15, 2	; 21
		PORTC|= (1<<1);
 2f2:	a9 9a       	sbi	0x15, 1	; 21
		PORTC&=~(1<<0);
 2f4:	a8 98       	cbi	0x15, 0	; 21
		
	}
	if(spd==5)
 2f6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <spd>
 2fa:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <spd+0x1>
 2fe:	05 97       	sbiw	r24, 0x05	; 5
 300:	91 f4       	brne	.+36     	; 0x326 <str+0x236>
	{
		PORTF&=~(1 << PF0);
 302:	e2 e6       	ldi	r30, 0x62	; 98
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	8e 7f       	andi	r24, 0xFE	; 254
 30a:	80 83       	st	Z, r24
		PORTF&=~(1 << PF1);
 30c:	80 81       	ld	r24, Z
 30e:	8d 7f       	andi	r24, 0xFD	; 253
 310:	80 83       	st	Z, r24
		PORTF&=~(1 << PF2);
 312:	80 81       	ld	r24, Z
 314:	8b 7f       	andi	r24, 0xFB	; 251
 316:	80 83       	st	Z, r24
		PORTF|= (1 << PF3);
 318:	80 81       	ld	r24, Z
 31a:	88 60       	ori	r24, 0x08	; 8
 31c:	80 83       	st	Z, r24
		//FAN LEDS
		PORTC|= (1<<3);
 31e:	ab 9a       	sbi	0x15, 3	; 21
		PORTC|= (1<<2);
 320:	aa 9a       	sbi	0x15, 2	; 21
		PORTC|= (1<<1);
 322:	a9 9a       	sbi	0x15, 1	; 21
		PORTC|= (1<<0);
 324:	a8 9a       	sbi	0x15, 0	; 21
 326:	08 95       	ret

00000328 <__vector_17>:
	
	// Enable SPI interrupt
	SPCR |= (1 << SPIE);
}

ISR(SPI_STC_vect) {
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	0b b6       	in	r0, 0x3b	; 59
 334:	0f 92       	push	r0
 336:	2f 93       	push	r18
 338:	3f 93       	push	r19
 33a:	4f 93       	push	r20
 33c:	5f 93       	push	r21
 33e:	6f 93       	push	r22
 340:	7f 93       	push	r23
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
 34a:	ef 93       	push	r30
 34c:	ff 93       	push	r31
	
	char receivedChar = SPDR;
 34e:	8f b1       	in	r24, 0x0f	; 15
	
	receivedString[stringIndex++] = receivedChar;
 350:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	9e 0f       	add	r25, r30
 358:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <__data_end>
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	eb 5e       	subi	r30, 0xEB	; 235
 360:	fe 4f       	sbci	r31, 0xFE	; 254
 362:	80 83       	st	Z, r24
	
	// Check if the end of the string is reached
	if (stringIndex == 2) {
 364:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	29 f4       	brne	.+10     	; 0x376 <__vector_17+0x4e>
		// Null-terminate the string
		receivedString[2] = '\0';
 36c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <receivedString+0x2>
		
		// Reset the index for the next string
		stringIndex = 0;
 370:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		str();
 374:	bd de       	rcall	.-646    	; 0xf0 <str>
		// Check if the received string is "L1"
		
	}
}
 376:	ff 91       	pop	r31
 378:	ef 91       	pop	r30
 37a:	bf 91       	pop	r27
 37c:	af 91       	pop	r26
 37e:	9f 91       	pop	r25
 380:	8f 91       	pop	r24
 382:	7f 91       	pop	r23
 384:	6f 91       	pop	r22
 386:	5f 91       	pop	r21
 388:	4f 91       	pop	r20
 38a:	3f 91       	pop	r19
 38c:	2f 91       	pop	r18
 38e:	0f 90       	pop	r0
 390:	0b be       	out	0x3b, r0	; 59
 392:	0f 90       	pop	r0
 394:	0f be       	out	0x3f, r0	; 63
 396:	0f 90       	pop	r0
 398:	1f 90       	pop	r1
 39a:	18 95       	reti

0000039c <strcmp>:
 39c:	fb 01       	movw	r30, r22
 39e:	dc 01       	movw	r26, r24
 3a0:	8d 91       	ld	r24, X+
 3a2:	01 90       	ld	r0, Z+
 3a4:	80 19       	sub	r24, r0
 3a6:	01 10       	cpse	r0, r1
 3a8:	d9 f3       	breq	.-10     	; 0x3a0 <strcmp+0x4>
 3aa:	99 0b       	sbc	r25, r25
 3ac:	08 95       	ret

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
