
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000091b  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000836  00000000  00000000  00000c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000334  00000000  00000000  00001439  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001770  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ba  00000000  00000000  00001bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001cab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ac 30       	cpi	r26, 0x0C	; 12
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	13 d0       	rcall	.+38     	; 0xd0 <main>
  aa:	90 c0       	rjmp	.+288    	; 0x1cc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <USART_Init>:
}

void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  ae:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
  b2:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN)|(1<<TXEN);
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS)|(3<<UCSZ0);
  b8:	8e e0       	ldi	r24, 0x0E	; 14
  ba:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  be:	08 95       	ret

000000c0 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE)) )
  c0:	5d 9b       	sbis	0x0b, 5	; 11
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  c4:	8c b9       	out	0x0c, r24	; 12
  c6:	08 95       	ret

000000c8 <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC)) )
  c8:	5f 9b       	sbis	0x0b, 7	; 11
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
  cc:	8c b1       	in	r24, 0x0c	; 12
}
  ce:	08 95       	ret

000000d0 <main>:
void USART_Init( unsigned int ubrr );
void USART_Transmit( unsigned char data );
unsigned char USART_Receive( void );
int j=0;
int main( void )
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	00 d0       	rcall	.+0      	; 0xd6 <main+0x6>
  d6:	00 d0       	rcall	.+0      	; 0xd8 <main+0x8>
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
	unsigned char str[4] = "\n\rL1";
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	9d e0       	ldi	r25, 0x0D	; 13
  e0:	9a 83       	std	Y+2, r25	; 0x02
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	8c e4       	ldi	r24, 0x4C	; 76
  e6:	91 e3       	ldi	r25, 0x31	; 49
  e8:	9c 83       	std	Y+4, r25	; 0x04
  ea:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char strLenght = 4;
	unsigned char i = 0;
	DDRF|=(1<<6)|(1<<5)|(1<<4);
  ec:	e1 e6       	ldi	r30, 0x61	; 97
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 67       	ori	r24, 0x70	; 112
  f4:	80 83       	st	Z, r24
	USART_Init ( MYUBRR );
  f6:	87 e6       	ldi	r24, 0x67	; 103
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	d9 df       	rcall	.-78     	; 0xae <USART_Init>
int j=0;
int main( void )
{
	unsigned char str[4] = "\n\rL1";
	unsigned char strLenght = 4;
	unsigned char i = 0;
  fc:	b1 2c       	mov	r11, r1
	//USART_Transmit('S' );
	while(1)
	{
		USART_Transmit( str[i++] );
		if(i >= strLenght)
		i = 0;
  fe:	a1 2c       	mov	r10, r1
		{
			
			arr[j]=USART_Receive();
		}
		
		if (arr[0] == 'L' && arr[1] == '1') {
 100:	0f 2e       	mov	r0, r31
 102:	f2 e0       	ldi	r31, 0x02	; 2
 104:	ef 2e       	mov	r14, r31
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	ff 2e       	mov	r15, r31
 10a:	f0 2d       	mov	r31, r0
			// If data is "l1", set PD7 high
			PORTF ^= (1 << PF5);
		}
		if (arr[0] == 'L' && arr[1] == '3') {
			// If data is "l1", set PD7 high
			PORTF ^= (1 << PF4);
 10c:	0f 2e       	mov	r0, r31
 10e:	f2 e6       	ldi	r31, 0x62	; 98
 110:	cf 2e       	mov	r12, r31
 112:	d1 2c       	mov	r13, r1
 114:	f0 2d       	mov	r31, r0
 116:	68 94       	set
 118:	77 24       	eor	r7, r7
 11a:	74 f8       	bld	r7, 4
			// If data is "l1", set PD7 high
			PORTF ^= (1 << PF6);
		}
		if (arr[0] == 'L' && arr[1] == '2') {
			// If data is "l1", set PD7 high
			PORTF ^= (1 << PF5);
 11c:	68 94       	set
 11e:	88 24       	eor	r8, r8
 120:	85 f8       	bld	r8, 5
			arr[j]=USART_Receive();
		}
		
		if (arr[0] == 'L' && arr[1] == '1') {
			// If data is "l1", set PD7 high
			PORTF ^= (1 << PF6);
 122:	68 94       	set
 124:	99 24       	eor	r9, r9
 126:	96 f8       	bld	r9, 6
	DDRF|=(1<<6)|(1<<5)|(1<<4);
	USART_Init ( MYUBRR );
	//USART_Transmit('S' );
	while(1)
	{
		USART_Transmit( str[i++] );
 128:	11 e0       	ldi	r17, 0x01	; 1
 12a:	1b 0d       	add	r17, r11
 12c:	e1 e0       	ldi	r30, 0x01	; 1
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	ec 0f       	add	r30, r28
 132:	fd 1f       	adc	r31, r29
 134:	eb 0d       	add	r30, r11
 136:	f1 1d       	adc	r31, r1
 138:	80 81       	ld	r24, Z
 13a:	c2 df       	rcall	.-124    	; 0xc0 <USART_Transmit>
		if(i >= strLenght)
 13c:	14 30       	cpi	r17, 0x04	; 4
 13e:	08 f4       	brcc	.+2      	; 0x142 <main+0x72>
 140:	3f c0       	rjmp	.+126    	; 0x1c0 <main+0xf0>
		i = 0;
		
		for(j=0;j<2;j++)
 142:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 146:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	//USART_Transmit('S' );
	while(1)
	{
		USART_Transmit( str[i++] );
		if(i >= strLenght)
		i = 0;
 14a:	ba 2c       	mov	r11, r10
	DDRF|=(1<<6)|(1<<5)|(1<<4);
	USART_Init ( MYUBRR );
	//USART_Transmit('S' );
	while(1)
	{
		USART_Transmit( str[i++] );
 14c:	00 e0       	ldi	r16, 0x00	; 0
		i = 0;
		
		for(j=0;j<2;j++)
		{
			
			arr[j]=USART_Receive();
 14e:	10 e0       	ldi	r17, 0x00	; 0
 150:	bb df       	rcall	.-138    	; 0xc8 <USART_Receive>
 152:	f8 01       	movw	r30, r16
 154:	ee 5f       	subi	r30, 0xFE	; 254
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	80 83       	st	Z, r24
	{
		USART_Transmit( str[i++] );
		if(i >= strLenght)
		i = 0;
		
		for(j=0;j<2;j++)
 15a:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 15e:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 162:	0f 5f       	subi	r16, 0xFF	; 255
 164:	1f 4f       	sbci	r17, 0xFF	; 255
 166:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <__DATA_REGION_ORIGIN__>
 16e:	02 30       	cpi	r16, 0x02	; 2
 170:	11 05       	cpc	r17, r1
 172:	74 f3       	brlt	.-36     	; 0x150 <main+0x80>
		{
			
			arr[j]=USART_Receive();
		}
		
		if (arr[0] == 'L' && arr[1] == '1') {
 174:	f7 01       	movw	r30, r14
 176:	80 81       	ld	r24, Z
 178:	8c 34       	cpi	r24, 0x4C	; 76
 17a:	b1 f6       	brne	.-84     	; 0x128 <main+0x58>
 17c:	81 81       	ldd	r24, Z+1	; 0x01
 17e:	81 33       	cpi	r24, 0x31	; 49
 180:	41 f4       	brne	.+16     	; 0x192 <main+0xc2>
			// If data is "l1", set PD7 high
			PORTF ^= (1 << PF6);
 182:	f6 01       	movw	r30, r12
 184:	80 81       	ld	r24, Z
 186:	89 25       	eor	r24, r9
 188:	80 83       	st	Z, r24
		}
		if (arr[0] == 'L' && arr[1] == '2') {
 18a:	f7 01       	movw	r30, r14
 18c:	80 81       	ld	r24, Z
 18e:	8c 34       	cpi	r24, 0x4C	; 76
 190:	59 f6       	brne	.-106    	; 0x128 <main+0x58>
 192:	f7 01       	movw	r30, r14
 194:	81 81       	ldd	r24, Z+1	; 0x01
 196:	82 33       	cpi	r24, 0x32	; 50
 198:	49 f4       	brne	.+18     	; 0x1ac <main+0xdc>
			// If data is "l1", set PD7 high
			PORTF ^= (1 << PF5);
 19a:	f6 01       	movw	r30, r12
 19c:	80 81       	ld	r24, Z
 19e:	88 25       	eor	r24, r8
 1a0:	80 83       	st	Z, r24
		}
		if (arr[0] == 'L' && arr[1] == '3') {
 1a2:	f7 01       	movw	r30, r14
 1a4:	80 81       	ld	r24, Z
 1a6:	8c 34       	cpi	r24, 0x4C	; 76
 1a8:	09 f0       	breq	.+2      	; 0x1ac <main+0xdc>
 1aa:	be cf       	rjmp	.-132    	; 0x128 <main+0x58>
 1ac:	f7 01       	movw	r30, r14
 1ae:	81 81       	ldd	r24, Z+1	; 0x01
 1b0:	83 33       	cpi	r24, 0x33	; 51
 1b2:	09 f0       	breq	.+2      	; 0x1b6 <main+0xe6>
 1b4:	b9 cf       	rjmp	.-142    	; 0x128 <main+0x58>
			// If data is "l1", set PD7 high
			PORTF ^= (1 << PF4);
 1b6:	f6 01       	movw	r30, r12
 1b8:	80 81       	ld	r24, Z
 1ba:	87 25       	eor	r24, r7
 1bc:	80 83       	st	Z, r24
 1be:	b4 cf       	rjmp	.-152    	; 0x128 <main+0x58>
	{
		USART_Transmit( str[i++] );
		if(i >= strLenght)
		i = 0;
		
		for(j=0;j<2;j++)
 1c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	DDRF|=(1<<6)|(1<<5)|(1<<4);
	USART_Init ( MYUBRR );
	//USART_Transmit('S' );
	while(1)
	{
		USART_Transmit( str[i++] );
 1c8:	b1 2e       	mov	r11, r17
 1ca:	c0 cf       	rjmp	.-128    	; 0x14c <main+0x7c>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
