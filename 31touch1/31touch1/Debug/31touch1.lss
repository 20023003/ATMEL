
31touch1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  000008da  0000096e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800172  00800172  000009e0  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00000a80  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ba6  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001259  00000000  00000000  000038b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001160  00000000  00000000  00004b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000520  00000000  00000000  00005c70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000173d  00000000  00000000  00006190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af4  00000000  00000000  000078cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  000083c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_16>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_19>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_39>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ea ed       	ldi	r30, 0xDA	; 218
  e0:	f8 e0       	ldi	r31, 0x08	; 8
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a2 37       	cpi	r26, 0x72	; 114
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a2 e7       	ldi	r26, 0x72	; 114
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a0 3e       	cpi	r26, 0xE0	; 224
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 af 00 	call	0x15e	; 0x15e <main>
 102:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
 10a:	0e 94 44 01 	call	0x288	; 0x288 <system_init>

	touch_init();
 10e:	0e 94 b3 00 	call	0x166	; 0x166 <touch_init>
 112:	08 95       	ret

00000114 <__vector_16>:

#include <driver_init.h>
#include <compiler.h>

ISR(TIMER0_COMPA_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	4f 93       	push	r20
 124:	5f 93       	push	r21
 126:	6f 93       	push	r22
 128:	7f 93       	push	r23
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
 132:	ef 93       	push	r30
 134:	ff 93       	push	r31

	mega_touch_timer();
 136:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <mega_touch_timer>

	/* Clear the timer flag */
	TIFR0 |= OCF0A;
 13a:	a8 9a       	sbi	0x15, 0	; 21
}
 13c:	ff 91       	pop	r31
 13e:	ef 91       	pop	r30
 140:	bf 91       	pop	r27
 142:	af 91       	pop	r26
 144:	9f 91       	pop	r25
 146:	8f 91       	pop	r24
 148:	7f 91       	pop	r23
 14a:	6f 91       	pop	r22
 14c:	5f 91       	pop	r21
 14e:	4f 91       	pop	r20
 150:	3f 91       	pop	r19
 152:	2f 91       	pop	r18
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 15e:	0e 94 85 00 	call	0x10a	; 0x10a <atmel_start_init>
 162:	ff cf       	rjmp	.-2      	; 0x162 <main+0x4>

00000164 <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
 164:	08 95       	ret

00000166 <touch_init>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	88 e0       	ldi	r24, 0x08	; 8
 170:	87 bd       	out	0x27, r24	; 39
 172:	e3 e6       	ldi	r30, 0x63	; 99
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	87 7f       	andi	r24, 0xF7	; 247
 17a:	80 83       	st	Z, r24
 17c:	12 98       	cbi	0x02, 2	; 2
 17e:	13 98       	cbi	0x02, 3	; 2
 180:	14 98       	cbi	0x02, 4	; 2
 182:	11 98       	cbi	0x02, 1	; 2
 184:	10 98       	cbi	0x02, 0	; 2
 186:	15 98       	cbi	0x02, 5	; 2
 188:	84 e2       	ldi	r24, 0x24	; 36
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 2c 03 	call	0x658	; 0x658 <qtm_ptc_init_acquisition_module>
 190:	8c ea       	ldi	r24, 0xAC	; 172
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 bd 03 	call	0x77a	; 0x77a <qtm_ptc_qtlib_assign_signal_memory>
 198:	c0 e0       	ldi	r28, 0x00	; 0
 19a:	d0 e0       	ldi	r29, 0x00	; 0
 19c:	be 01       	movw	r22, r28
 19e:	84 e2       	ldi	r24, 0x24	; 36
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 c7 03 	call	0x78e	; 0x78e <qtm_enable_sensor_node>
 1a6:	be 01       	movw	r22, r28
 1a8:	84 e2       	ldi	r24, 0x24	; 36
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 e6 03 	call	0x7cc	; 0x7cc <qtm_calibrate_sensor_node>
 1b0:	21 96       	adiw	r28, 0x01	; 1
 1b2:	c6 30       	cpi	r28, 0x06	; 6
 1b4:	d1 05       	cpc	r29, r1
 1b6:	91 f7       	brne	.-28     	; 0x19c <touch_init+0x36>
 1b8:	0e e8       	ldi	r16, 0x8E	; 142
 1ba:	11 e0       	ldi	r17, 0x01	; 1
 1bc:	c0 e0       	ldi	r28, 0x00	; 0
 1be:	a8 01       	movw	r20, r16
 1c0:	6c 2f       	mov	r22, r28
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	91 e0       	ldi	r25, 0x01	; 1
 1c6:	0e 94 06 02 	call	0x40c	; 0x40c <qtm_init_sensor_key>
 1ca:	cf 5f       	subi	r28, 0xFF	; 255
 1cc:	0b 5f       	subi	r16, 0xFB	; 251
 1ce:	1f 4f       	sbci	r17, 0xFF	; 255
 1d0:	c6 30       	cpi	r28, 0x06	; 6
 1d2:	a9 f7       	brne	.-22     	; 0x1be <touch_init+0x58>
 1d4:	0e 94 b2 00 	call	0x164	; 0x164 <datastreamer_init>
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	0f 91       	pop	r16
 1e0:	08 95       	ret

000001e2 <touch_timer_handler>:
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <time_to_measure_touch_flag>
 1e8:	84 e1       	ldi	r24, 0x14	; 20
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <qtm_update_qtlib_timer>
 1f0:	08 95       	ret

000001f2 <mega_touch_timer>:
 1f2:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
 1f6:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
 1fa:	44 97       	sbiw	r24, 0x14	; 20
 1fc:	39 f4       	brne	.+14     	; 0x20c <mega_touch_timer+0x1a>
 1fe:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <__data_end+0x1>
 202:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
 206:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <touch_timer_handler>
 20a:	08 95       	ret
 20c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
 210:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <__data_end+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <__data_end+0x1>
 21a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
 21e:	08 95       	ret

00000220 <__vector_39>:
Input  : none
Output : none
Notes  : none
============================================================================*/
ISR(PTC_EOC_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	2f 93       	push	r18
 22c:	3f 93       	push	r19
 22e:	4f 93       	push	r20
 230:	5f 93       	push	r21
 232:	6f 93       	push	r22
 234:	7f 93       	push	r23
 236:	8f 93       	push	r24
 238:	9f 93       	push	r25
 23a:	af 93       	push	r26
 23c:	bf 93       	push	r27
 23e:	ef 93       	push	r30
 240:	ff 93       	push	r31
	qtm_m324pb_ptc_handler_eoc();
 242:	0e 94 26 04 	call	0x84c	; 0x84c <qtm_m324pb_ptc_handler_eoc>
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	7f 91       	pop	r23
 254:	6f 91       	pop	r22
 256:	5f 91       	pop	r21
 258:	4f 91       	pop	r20
 25a:	3f 91       	pop	r19
 25c:	2f 91       	pop	r18
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <SPI_0_initialization>:
}

void Timer_initialization(void)
{

	Timer_init();
 268:	26 98       	cbi	0x04, 6	; 4
 26a:	2e 98       	cbi	0x05, 6	; 5
 26c:	25 9a       	sbi	0x04, 5	; 4
 26e:	2d 98       	cbi	0x05, 5	; 5
 270:	27 9a       	sbi	0x04, 7	; 4
 272:	2f 98       	cbi	0x05, 7	; 5
 274:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <SPI_0_init>
 278:	08 95       	ret

0000027a <USART_initialization>:
 */
static inline void PORTD_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
 27a:	50 98       	cbi	0x0a, 0	; 10
		DDRD &= ~(1 << pin);

		PORTD |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTD &= ~(1 << pin);
 27c:	58 98       	cbi	0x0b, 0	; 11
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
 27e:	51 9a       	sbi	0x0a, 1	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
 280:	59 98       	cbi	0x0b, 1	; 11
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_init();
 282:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <USART_init>
 286:	08 95       	ret

00000288 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR1 = (1 << PRTIM4) | (1 << PRTIM3);
 288:	83 e0       	ldi	r24, 0x03	; 3
 28a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <__TEXT_REGION_LENGTH__+0x7f8065>

	PRR0 = (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI0) | (1 << PRUSART1) | (1 << PRUSART0)
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f8064>
	       | (1 << PRADC) | (1 << PRSPI0);

	PRR2 = (1 << PRUSART2) | (1 << PRSPI1) | (1 << PRPTC) | (1 << PRTWI1);
 294:	9f e0       	ldi	r25, 0x0F	; 15
 296:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f8063>
		break;
	case PORT_DIR_OUT:
		DDRA |= mask;
		break;
	case PORT_DIR_OFF:
		DDRA &= ~mask;
 29a:	91 b1       	in	r25, 0x01	; 1
 29c:	11 b8       	out	0x01, r1	; 1

		PORTA |= mask;
 29e:	92 b1       	in	r25, 0x02	; 2
 2a0:	82 b9       	out	0x02, r24	; 2
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 2a2:	94 b1       	in	r25, 0x04	; 4
 2a4:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
 2a6:	95 b1       	in	r25, 0x05	; 5
 2a8:	85 b9       	out	0x05, r24	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 2aa:	97 b1       	in	r25, 0x07	; 7
 2ac:	17 b8       	out	0x07, r1	; 7

		PORTC |= mask;
 2ae:	98 b1       	in	r25, 0x08	; 8
 2b0:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 2b2:	9a b1       	in	r25, 0x0a	; 10
 2b4:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
 2b6:	9b b1       	in	r25, 0x0b	; 11
 2b8:	8b b9       	out	0x0b, r24	; 11
		break;
	case PORT_DIR_OUT:
		DDRE |= mask;
		break;
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 2ba:	8d b1       	in	r24, 0x0d	; 13
 2bc:	80 78       	andi	r24, 0x80	; 128
 2be:	8d b9       	out	0x0d, r24	; 13

		PORTE |= mask;
 2c0:	8e b1       	in	r24, 0x0e	; 14
 2c2:	8f 67       	ori	r24, 0x7F	; 127
 2c4:	8e b9       	out	0x0e, r24	; 14
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 2c6:	40 e0       	ldi	r20, 0x00	; 0
 2c8:	60 e8       	ldi	r22, 0x80	; 128
 2ca:	81 e6       	ldi	r24, 0x61	; 97
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 73 01 	call	0x2e6	; 0x2e6 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 2d2:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
 2d4:	15 be       	out	0x35, r1	; 53

	ENABLE_INTERRUPTS();
 2d6:	78 94       	sei
{
	mcu_init();

	sysctrl_init();

	SPI_0_initialization();
 2d8:	0e 94 34 01 	call	0x268	; 0x268 <SPI_0_initialization>
}

void Timer_initialization(void)
{

	Timer_init();
 2dc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <Timer_init>

	SPI_0_initialization();

	Timer_initialization();

	USART_initialization();
 2e0:	0e 94 3d 01 	call	0x27a	; 0x27a <USART_initialization>
 2e4:	08 95       	ret

000002e6 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 2e6:	2f b7       	in	r18, 0x3f	; 63
	cli
 2e8:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 2ea:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 2ec:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 2ee:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 2f0:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 2f2:	08 95       	ret

000002f4 <SPI_0_init>:
                 after the previous one (i.e. data transfer phase
                 after control/command phase).
*/
void SPI_0_register_callback(spi_transfer_done_cb_t f)
{
	SPI_0_desc.cb = f;
 2f4:	e4 e6       	ldi	r30, 0x64	; 100
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	8b 7f       	andi	r24, 0xFB	; 251
 2fc:	80 83       	st	Z, r24
 2fe:	80 ed       	ldi	r24, 0xD0	; 208
 300:	8c bd       	out	0x2c, r24	; 44
 302:	e5 e7       	ldi	r30, 0x75	; 117
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	10 82       	st	Z, r1
 308:	16 82       	std	Z+6, r1	; 0x06
 30a:	15 82       	std	Z+5, r1	; 0x05
 30c:	08 95       	ret

0000030e <__vector_19>:
}

ISR(SPI0_STC_vect)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR0;
 334:	9e b5       	in	r25, 0x2e	; 46
	uint8_t wdata = 0;

	if (SPI_0_desc.type != SPI_WRITE) {
 336:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <SPI_0_desc+0x4>
 33a:	82 30       	cpi	r24, 0x02	; 2
 33c:	11 f1       	breq	.+68     	; 0x382 <__vector_19+0x74>
		*SPI_0_desc.data = rdata;
 33e:	c5 e7       	ldi	r28, 0x75	; 117
 340:	d1 e0       	ldi	r29, 0x01	; 1
 342:	a9 81       	ldd	r26, Y+1	; 0x01
 344:	ba 81       	ldd	r27, Y+2	; 0x02
 346:	fd 01       	movw	r30, r26
 348:	91 93       	st	Z+, r25
	}

	SPI_0_desc.data++;
 34a:	fa 83       	std	Y+2, r31	; 0x02
 34c:	e9 83       	std	Y+1, r30	; 0x01

	if (SPI_0_desc.type != SPI_READ)
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	19 f0       	breq	.+6      	; 0x358 <__vector_19+0x4a>
		wdata = *SPI_0_desc.data;
 352:	11 96       	adiw	r26, 0x01	; 1
 354:	9c 91       	ld	r25, X
 356:	01 c0       	rjmp	.+2      	; 0x35a <__vector_19+0x4c>
	/* SPI_0_desc.data points to array element
	   to write the received data to. The data to be transmitted
	   is in the next array element.
	*/
	uint8_t rdata = SPDR0;
	uint8_t wdata = 0;
 358:	90 e0       	ldi	r25, 0x00	; 0
	SPI_0_desc.data++;

	if (SPI_0_desc.type != SPI_READ)
		wdata = *SPI_0_desc.data;

	SPI_0_desc.size--;
 35a:	e5 e7       	ldi	r30, 0x75	; 117
 35c:	f1 e0       	ldi	r31, 0x01	; 1
 35e:	83 81       	ldd	r24, Z+3	; 0x03
 360:	81 50       	subi	r24, 0x01	; 1
 362:	83 83       	std	Z+3, r24	; 0x03
	// if more bytes to be transferred
	if (SPI_0_desc.size != 0) {
 364:	88 23       	and	r24, r24
 366:	11 f0       	breq	.+4      	; 0x36c <__vector_19+0x5e>
		// more data to send, send a byte
		SPDR0 = wdata;
 368:	9e bd       	out	0x2e, r25	; 46
 36a:	14 c0       	rjmp	.+40     	; 0x394 <__vector_19+0x86>
	}

	// if last byte has been transferred, update status
	// and optionally call callback
	else {
		SPI_0_desc.status = SPI_DONE;
 36c:	e5 e7       	ldi	r30, 0x75	; 117
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	80 83       	st	Z, r24
		if (SPI_0_desc.cb != NULL) {
 374:	05 80       	ldd	r0, Z+5	; 0x05
 376:	f6 81       	ldd	r31, Z+6	; 0x06
 378:	e0 2d       	mov	r30, r0
 37a:	30 97       	sbiw	r30, 0x00	; 0
 37c:	59 f0       	breq	.+22     	; 0x394 <__vector_19+0x86>
			SPI_0_desc.cb();
 37e:	09 95       	icall
		}
	}
}
 380:	09 c0       	rjmp	.+18     	; 0x394 <__vector_19+0x86>

	if (SPI_0_desc.type != SPI_WRITE) {
		*SPI_0_desc.data = rdata;
	}

	SPI_0_desc.data++;
 382:	e5 e7       	ldi	r30, 0x75	; 117
 384:	f1 e0       	ldi	r31, 0x01	; 1
 386:	a1 81       	ldd	r26, Z+1	; 0x01
 388:	b2 81       	ldd	r27, Z+2	; 0x02
 38a:	cd 01       	movw	r24, r26
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	92 83       	std	Z+2, r25	; 0x02
 390:	81 83       	std	Z+1, r24	; 0x01
 392:	df cf       	rjmp	.-66     	; 0x352 <__vector_19+0x44>
		SPI_0_desc.status = SPI_DONE;
		if (SPI_0_desc.cb != NULL) {
			SPI_0_desc.cb();
		}
	}
}
 394:	ff 91       	pop	r31
 396:	ef 91       	pop	r30
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	bf 91       	pop	r27
 39e:	af 91       	pop	r26
 3a0:	9f 91       	pop	r25
 3a2:	8f 91       	pop	r24
 3a4:	7f 91       	pop	r23
 3a6:	6f 91       	pop	r22
 3a8:	5f 91       	pop	r21
 3aa:	4f 91       	pop	r20
 3ac:	3f 91       	pop	r19
 3ae:	2f 91       	pop	r18
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <Timer_init>:
 */
int8_t Timer_init()
{

	/* Enable TC0 */
	PRR0 &= ~(1 << PRTIM0);
 3ba:	e4 e6       	ldi	r30, 0x64	; 100
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	8f 7d       	andi	r24, 0xDF	; 223
 3c2:	80 83       	st	Z, r24

	TCCR0A = (0 << COM0A1) | (0 << COM0A0)   /* Normal port operation, OCA disconnected */
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	84 bd       	out	0x24, r24	; 36
	         | (0 << COM0B1) | (0 << COM0B0) /* Normal port operation, OCB disconnected */
	         | (1 << WGM01) | (0 << WGM00);  /* TC8 Mode 2 CTC */

	TCCR0B = 0                                          /* TC8 Mode 2 CTC */
 3c8:	95 e0       	ldi	r25, 0x05	; 5
 3ca:	95 bd       	out	0x25, r25	; 37
	         | (1 << CS02) | (0 << CS01) | (1 << CS00); /* IO clock divided by 1024 */

	TIMSK0 = 0 << OCIE0B   /* Output Compare B Match Interrupt Enable: disabled */
 3cc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	// GTCCR = 0 << TSM /* Timer/Counter Synchronization Mode: disabled */
	//		 | 0 << PSRASY /* Prescaler Reset Timer/Counter2: disabled */
	//		 | 0 << PSRSYNC; /* Prescaler Reset: disabled */

	return 0;
}
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	08 95       	ret

000003d4 <USART_init>:
{

	// Module is in UART mode

	/* Enable USART0 */
	PRR0 &= ~(1 << PRUSART0);
 3d4:	e4 e6       	ldi	r30, 0x64	; 100
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	8d 7f       	andi	r24, 0xFD	; 253
 3dc:	80 83       	st	Z, r24

#define BAUD 38400

#include <utils/setbaud.h>

	UBRR0H = UBRRH_VALUE;
 3de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = UBRRL_VALUE;
 3e2:	8c e0       	ldi	r24, 0x0C	; 12
 3e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	UCSR0A = USE_2X << U2X /*  */
 3e8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	         | 0 << MPCM;  /* Multi-processor Communication Mode: disabled */

	UCSR0B = 0 << RXCIE    /* RX Complete Interrupt Enable: disabled */
 3ec:	88 e0       	ldi	r24, 0x08	; 8
 3ee:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// UCSR0D = 0 << RXSIE /* USART RX Start Interrupt Enable: disabled */
	//		 | 0 << SFDE; /* Start Frame Detection Enable: disabled */

	return 0;
}
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	08 95       	ret

000003f6 <qtm_update_qtlib_timer>:
 3f6:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <qtm_local_ms_timecount>
 3fa:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <qtm_local_ms_timecount+0x1>
 3fe:	82 0f       	add	r24, r18
 400:	93 1f       	adc	r25, r19
 402:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <qtm_local_ms_timecount+0x1>
 406:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <qtm_local_ms_timecount>
 40a:	08 95       	ret

0000040c <qtm_init_sensor_key>:
 40c:	00 97       	sbiw	r24, 0x00	; 0
 40e:	d9 f0       	breq	.+54     	; 0x446 <qtm_init_sensor_key+0x3a>
 410:	41 15       	cp	r20, r1
 412:	51 05       	cpc	r21, r1
 414:	c1 f0       	breq	.+48     	; 0x446 <qtm_init_sensor_key+0x3a>
 416:	26 e0       	ldi	r18, 0x06	; 6
 418:	62 9f       	mul	r22, r18
 41a:	b0 01       	movw	r22, r0
 41c:	11 24       	eor	r1, r1
 41e:	dc 01       	movw	r26, r24
 420:	14 96       	adiw	r26, 0x04	; 4
 422:	ed 91       	ld	r30, X+
 424:	fc 91       	ld	r31, X
 426:	15 97       	sbiw	r26, 0x05	; 5
 428:	e6 0f       	add	r30, r22
 42a:	f7 1f       	adc	r31, r23
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	20 83       	st	Z, r18
 430:	14 96       	adiw	r26, 0x04	; 4
 432:	8d 91       	ld	r24, X+
 434:	9c 91       	ld	r25, X
 436:	15 97       	sbiw	r26, 0x05	; 5
 438:	fc 01       	movw	r30, r24
 43a:	e6 0f       	add	r30, r22
 43c:	f7 1f       	adc	r31, r23
 43e:	53 83       	std	Z+3, r21	; 0x03
 440:	42 83       	std	Z+2, r20	; 0x02
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	08 95       	ret
 446:	8b e0       	ldi	r24, 0x0B	; 11
 448:	08 95       	ret

0000044a <select_next_channel_to_measure>:
 44a:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_measure_channel>
 44e:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <current_measure_channel+0x1>
 452:	a0 91 dc 01 	lds	r26, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 456:	b0 91 dd 01 	lds	r27, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 45a:	ed 91       	ld	r30, X+
 45c:	fc 91       	ld	r31, X
 45e:	11 97       	sbiw	r26, 0x01	; 1
 460:	40 81       	ld	r20, Z
 462:	51 81       	ldd	r21, Z+1	; 0x01
 464:	25 e0       	ldi	r18, 0x05	; 5
 466:	28 9f       	mul	r18, r24
 468:	b0 01       	movw	r22, r0
 46a:	29 9f       	mul	r18, r25
 46c:	70 0d       	add	r23, r0
 46e:	11 24       	eor	r1, r1
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	84 17       	cp	r24, r20
 476:	95 07       	cpc	r25, r21
 478:	a8 f4       	brcc	.+42     	; 0x4a4 <select_next_channel_to_measure+0x5a>
 47a:	14 96       	adiw	r26, 0x04	; 4
 47c:	ed 91       	ld	r30, X+
 47e:	fc 91       	ld	r31, X
 480:	15 97       	sbiw	r26, 0x05	; 5
 482:	e2 0f       	add	r30, r18
 484:	f3 1f       	adc	r31, r19
 486:	e6 0f       	add	r30, r22
 488:	f7 1f       	adc	r31, r23
 48a:	e0 81       	ld	r30, Z
 48c:	2b 5f       	subi	r18, 0xFB	; 251
 48e:	3f 4f       	sbci	r19, 0xFF	; 255
 490:	e0 fd       	sbrc	r30, 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <select_next_channel_to_measure+0x4e>
 494:	01 96       	adiw	r24, 0x01	; 1
 496:	ee cf       	rjmp	.-36     	; 0x474 <select_next_channel_to_measure+0x2a>
 498:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <current_measure_channel+0x1>
 49c:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <current_measure_channel>
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	08 95       	ret
 4a4:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <current_measure_channel+0x1>
 4a8:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <current_measure_channel>
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	08 95       	ret

000004b0 <qtm_measure_node>:
 4b0:	4a e0       	ldi	r20, 0x0A	; 10
 4b2:	48 9f       	mul	r20, r24
 4b4:	90 01       	movw	r18, r0
 4b6:	49 9f       	mul	r20, r25
 4b8:	30 0d       	add	r19, r0
 4ba:	11 24       	eor	r1, r1
 4bc:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 4c0:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 4c4:	02 80       	ldd	r0, Z+2	; 0x02
 4c6:	f3 81       	ldd	r31, Z+3	; 0x03
 4c8:	e0 2d       	mov	r30, r0
 4ca:	e2 0f       	add	r30, r18
 4cc:	f3 1f       	adc	r31, r19
 4ce:	42 81       	ldd	r20, Z+2	; 0x02
 4d0:	40 93 f8 00 	sts	0x00F8, r20	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7f80f8>
 4d4:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 4d8:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 4dc:	02 80       	ldd	r0, Z+2	; 0x02
 4de:	f3 81       	ldd	r31, Z+3	; 0x03
 4e0:	e0 2d       	mov	r30, r0
 4e2:	e2 0f       	add	r30, r18
 4e4:	f3 1f       	adc	r31, r19
 4e6:	43 81       	ldd	r20, Z+3	; 0x03
 4e8:	40 93 f9 00 	sts	0x00F9, r20	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7f80f9>
 4ec:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 4f0:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 4f4:	02 80       	ldd	r0, Z+2	; 0x02
 4f6:	f3 81       	ldd	r31, Z+3	; 0x03
 4f8:	e0 2d       	mov	r30, r0
 4fa:	e2 0f       	add	r30, r18
 4fc:	f3 1f       	adc	r31, r19
 4fe:	44 81       	ldd	r20, Z+4	; 0x04
 500:	40 93 fa 00 	sts	0x00FA, r20	; 0x8000fa <__TEXT_REGION_LENGTH__+0x7f80fa>
 504:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 508:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 50c:	02 80       	ldd	r0, Z+2	; 0x02
 50e:	f3 81       	ldd	r31, Z+3	; 0x03
 510:	e0 2d       	mov	r30, r0
 512:	e2 0f       	add	r30, r18
 514:	f3 1f       	adc	r31, r19
 516:	42 81       	ldd	r20, Z+2	; 0x02
 518:	53 81       	ldd	r21, Z+3	; 0x03
 51a:	64 81       	ldd	r22, Z+4	; 0x04
 51c:	75 81       	ldd	r23, Z+5	; 0x05
 51e:	47 2f       	mov	r20, r23
 520:	55 27       	eor	r21, r21
 522:	66 27       	eor	r22, r22
 524:	77 27       	eor	r23, r23
 526:	40 93 fb 00 	sts	0x00FB, r20	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7f80fb>
 52a:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 52e:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 532:	02 80       	ldd	r0, Z+2	; 0x02
 534:	f3 81       	ldd	r31, Z+3	; 0x03
 536:	e0 2d       	mov	r30, r0
 538:	e2 0f       	add	r30, r18
 53a:	f3 1f       	adc	r31, r19
 53c:	40 81       	ld	r20, Z
 53e:	40 93 f2 00 	sts	0x00F2, r20	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 542:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 546:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 54a:	02 80       	ldd	r0, Z+2	; 0x02
 54c:	f3 81       	ldd	r31, Z+3	; 0x03
 54e:	e0 2d       	mov	r30, r0
 550:	e2 0f       	add	r30, r18
 552:	f3 1f       	adc	r31, r19
 554:	41 81       	ldd	r20, Z+1	; 0x01
 556:	40 93 f3 00 	sts	0x00F3, r20	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 55a:	65 e0       	ldi	r22, 0x05	; 5
 55c:	68 9f       	mul	r22, r24
 55e:	a0 01       	movw	r20, r0
 560:	69 9f       	mul	r22, r25
 562:	50 0d       	add	r21, r0
 564:	11 24       	eor	r1, r1
 566:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 56a:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 56e:	04 80       	ldd	r0, Z+4	; 0x04
 570:	f5 81       	ldd	r31, Z+5	; 0x05
 572:	e0 2d       	mov	r30, r0
 574:	e4 0f       	add	r30, r20
 576:	f5 1f       	adc	r31, r21
 578:	83 81       	ldd	r24, Z+3	; 0x03
 57a:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
 57e:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 582:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 586:	04 80       	ldd	r0, Z+4	; 0x04
 588:	f5 81       	ldd	r31, Z+5	; 0x05
 58a:	e0 2d       	mov	r30, r0
 58c:	e4 0f       	add	r30, r20
 58e:	f5 1f       	adc	r31, r21
 590:	83 81       	ldd	r24, Z+3	; 0x03
 592:	94 81       	ldd	r25, Z+4	; 0x04
 594:	88 27       	eor	r24, r24
 596:	9f 73       	andi	r25, 0x3F	; 63
 598:	90 93 e6 00 	sts	0x00E6, r25	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7f80e6>
 59c:	a0 91 dc 01 	lds	r26, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 5a0:	b0 91 dd 01 	lds	r27, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 5a4:	14 96       	adiw	r26, 0x04	; 4
 5a6:	ed 91       	ld	r30, X+
 5a8:	fc 91       	ld	r31, X
 5aa:	15 97       	sbiw	r26, 0x05	; 5
 5ac:	e4 0f       	add	r30, r20
 5ae:	f5 1f       	adc	r31, r21
 5b0:	80 81       	ld	r24, Z
 5b2:	81 fd       	sbrc	r24, 1
 5b4:	60 83       	st	Z, r22
 5b6:	14 96       	adiw	r26, 0x04	; 4
 5b8:	8d 91       	ld	r24, X+
 5ba:	9c 91       	ld	r25, X
 5bc:	15 97       	sbiw	r26, 0x05	; 5
 5be:	fc 01       	movw	r30, r24
 5c0:	e4 0f       	add	r30, r20
 5c2:	f5 1f       	adc	r31, r21
 5c4:	80 81       	ld	r24, Z
 5c6:	8c 71       	andi	r24, 0x1C	; 28
 5c8:	71 f4       	brne	.+28     	; 0x5e6 <qtm_measure_node+0x136>
 5ca:	12 96       	adiw	r26, 0x02	; 2
 5cc:	ed 91       	ld	r30, X+
 5ce:	fc 91       	ld	r31, X
 5d0:	13 97       	sbiw	r26, 0x03	; 3
 5d2:	e2 0f       	add	r30, r18
 5d4:	f3 1f       	adc	r31, r19
 5d6:	e0 85       	ldd	r30, Z+8	; 0x08
 5d8:	e2 95       	swap	r30
 5da:	ef 70       	andi	r30, 0x0F	; 15
 5dc:	f0 e0       	ldi	r31, 0x00	; 0
 5de:	e5 59       	subi	r30, 0x95	; 149
 5e0:	fe 4f       	sbci	r31, 0xFE	; 254
 5e2:	80 81       	ld	r24, Z
 5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <qtm_measure_node+0x138>
 5e6:	8f e3       	ldi	r24, 0x3F	; 63
 5e8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7f80e7>
 5ec:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 5f0:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 5f4:	02 80       	ldd	r0, Z+2	; 0x02
 5f6:	f3 81       	ldd	r31, Z+3	; 0x03
 5f8:	e0 2d       	mov	r30, r0
 5fa:	e2 0f       	add	r30, r18
 5fc:	f3 1f       	adc	r31, r19
 5fe:	86 81       	ldd	r24, Z+6	; 0x06
 600:	8b 3f       	cpi	r24, 0xFB	; 251
 602:	10 f4       	brcc	.+4      	; 0x608 <qtm_measure_node+0x158>
 604:	8c 5f       	subi	r24, 0xFC	; 252
 606:	01 c0       	rjmp	.+2      	; 0x60a <qtm_measure_node+0x15a>
 608:	8f ef       	ldi	r24, 0xFF	; 255
 60a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 60e:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 612:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 616:	02 80       	ldd	r0, Z+2	; 0x02
 618:	f3 81       	ldd	r31, Z+3	; 0x03
 61a:	e0 2d       	mov	r30, r0
 61c:	e2 0f       	add	r30, r18
 61e:	f3 1f       	adc	r31, r19
 620:	87 81       	ldd	r24, Z+7	; 0x07
 622:	80 7f       	andi	r24, 0xF0	; 240
 624:	91 85       	ldd	r25, Z+9	; 0x09
 626:	89 2b       	or	r24, r25
 628:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
 62c:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <qtm_acquisition_control_working_set_ptr>
 630:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <qtm_acquisition_control_working_set_ptr+0x1>
 634:	82 81       	ldd	r24, Z+2	; 0x02
 636:	93 81       	ldd	r25, Z+3	; 0x03
 638:	fc 01       	movw	r30, r24
 63a:	e2 0f       	add	r30, r18
 63c:	f3 1f       	adc	r31, r19
 63e:	87 81       	ldd	r24, Z+7	; 0x07
 640:	8f 70       	andi	r24, 0x0F	; 15
 642:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 646:	82 e1       	ldi	r24, 0x12	; 18
 648:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
 64c:	80 91 e9 00 	lds	r24, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 650:	81 60       	ori	r24, 0x01	; 1
 652:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 656:	08 95       	ret

00000658 <qtm_ptc_init_acquisition_module>:
 658:	8f 92       	push	r8
 65a:	9f 92       	push	r9
 65c:	af 92       	push	r10
 65e:	bf 92       	push	r11
 660:	cf 92       	push	r12
 662:	df 92       	push	r13
 664:	ef 92       	push	r14
 666:	ff 92       	push	r15
 668:	cf 93       	push	r28
 66a:	df 93       	push	r29
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	09 f4       	brne	.+2      	; 0x672 <qtm_ptc_init_acquisition_module+0x1a>
 670:	76 c0       	rjmp	.+236    	; 0x75e <qtm_ptc_init_acquisition_module+0x106>
 672:	dc 01       	movw	r26, r24
 674:	ed 91       	ld	r30, X+
 676:	fc 91       	ld	r31, X
 678:	c0 80       	ld	r12, Z
 67a:	d1 80       	ldd	r13, Z+1	; 0x01
 67c:	e1 2c       	mov	r14, r1
 67e:	f1 2c       	mov	r15, r1
 680:	a0 e0       	ldi	r26, 0x00	; 0
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	40 e0       	ldi	r20, 0x00	; 0
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	ba 01       	movw	r22, r20
 68a:	20 e0       	ldi	r18, 0x00	; 0
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	ac 15       	cp	r26, r12
 690:	bd 05       	cpc	r27, r13
 692:	b1 f0       	breq	.+44     	; 0x6c0 <qtm_ptc_init_acquisition_module+0x68>
 694:	ec 01       	movw	r28, r24
 696:	ea 81       	ldd	r30, Y+2	; 0x02
 698:	fb 81       	ldd	r31, Y+3	; 0x03
 69a:	ee 0d       	add	r30, r14
 69c:	ff 1d       	adc	r31, r15
 69e:	a0 80       	ld	r10, Z
 6a0:	b1 80       	ldd	r11, Z+1	; 0x01
 6a2:	2a 29       	or	r18, r10
 6a4:	3b 29       	or	r19, r11
 6a6:	82 80       	ldd	r8, Z+2	; 0x02
 6a8:	93 80       	ldd	r9, Z+3	; 0x03
 6aa:	a4 80       	ldd	r10, Z+4	; 0x04
 6ac:	b5 80       	ldd	r11, Z+5	; 0x05
 6ae:	48 29       	or	r20, r8
 6b0:	59 29       	or	r21, r9
 6b2:	6a 29       	or	r22, r10
 6b4:	7b 29       	or	r23, r11
 6b6:	11 96       	adiw	r26, 0x01	; 1
 6b8:	da e0       	ldi	r29, 0x0A	; 10
 6ba:	ed 0e       	add	r14, r29
 6bc:	f1 1c       	adc	r15, r1
 6be:	e7 cf       	rjmp	.-50     	; 0x68e <qtm_ptc_init_acquisition_module+0x36>
 6c0:	41 15       	cp	r20, r1
 6c2:	51 05       	cpc	r21, r1
 6c4:	61 05       	cpc	r22, r1
 6c6:	71 05       	cpc	r23, r1
 6c8:	09 f4       	brne	.+2      	; 0x6cc <qtm_ptc_init_acquisition_module+0x74>
 6ca:	4b c0       	rjmp	.+150    	; 0x762 <qtm_ptc_init_acquisition_module+0x10a>
 6cc:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <touch_seq_lib_state>
 6d0:	4a 01       	movw	r8, r20
 6d2:	5b 01       	movw	r10, r22
 6d4:	88 24       	eor	r8, r8
 6d6:	aa 24       	eor	r10, r10
 6d8:	bb 24       	eor	r11, r11
 6da:	6a 01       	movw	r12, r20
 6dc:	7b 01       	movw	r14, r22
 6de:	cc 24       	eor	r12, r12
 6e0:	dd 24       	eor	r13, r13
 6e2:	ff 24       	eor	r15, r15
 6e4:	87 2f       	mov	r24, r23
 6e6:	99 27       	eor	r25, r25
 6e8:	aa 27       	eor	r26, r26
 6ea:	bb 27       	eor	r27, r27
 6ec:	e1 11       	cpse	r30, r1
 6ee:	17 c0       	rjmp	.+46     	; 0x71e <qtm_ptc_init_acquisition_module+0xc6>
 6f0:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 6f4:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 6f8:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
 6fc:	89 2c       	mov	r8, r9
 6fe:	9a 2c       	mov	r9, r10
 700:	ab 2c       	mov	r10, r11
 702:	bb 24       	eor	r11, r11
 704:	80 92 f5 00 	sts	0x00F5, r8	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
 708:	67 01       	movw	r12, r14
 70a:	ee 24       	eor	r14, r14
 70c:	ff 24       	eor	r15, r15
 70e:	c0 92 f6 00 	sts	0x00F6, r12	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
 712:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <touch_seq_lib_state>
 71c:	1e c0       	rjmp	.+60     	; 0x75a <qtm_ptc_init_acquisition_module+0x102>
 71e:	e0 91 f0 00 	lds	r30, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 722:	2e 2b       	or	r18, r30
 724:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 728:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 72c:	23 2b       	or	r18, r19
 72e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 732:	20 91 f4 00 	lds	r18, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
 736:	42 2b       	or	r20, r18
 738:	40 93 f4 00 	sts	0x00F4, r20	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7f80f4>
 73c:	20 91 f5 00 	lds	r18, 0x00F5	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
 740:	29 29       	or	r18, r9
 742:	20 93 f5 00 	sts	0x00F5, r18	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7f80f5>
 746:	20 91 f6 00 	lds	r18, 0x00F6	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
 74a:	2e 29       	or	r18, r14
 74c:	20 93 f6 00 	sts	0x00F6, r18	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7f80f6>
 750:	20 91 f7 00 	lds	r18, 0x00F7	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
 754:	82 2b       	or	r24, r18
 756:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7f80f7>
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	03 c0       	rjmp	.+6      	; 0x764 <qtm_ptc_init_acquisition_module+0x10c>
 75e:	8b e0       	ldi	r24, 0x0B	; 11
 760:	01 c0       	rjmp	.+2      	; 0x764 <qtm_ptc_init_acquisition_module+0x10c>
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	df 91       	pop	r29
 766:	cf 91       	pop	r28
 768:	ff 90       	pop	r15
 76a:	ef 90       	pop	r14
 76c:	df 90       	pop	r13
 76e:	cf 90       	pop	r12
 770:	bf 90       	pop	r11
 772:	af 90       	pop	r10
 774:	9f 90       	pop	r9
 776:	8f 90       	pop	r8
 778:	08 95       	ret

0000077a <qtm_ptc_qtlib_assign_signal_memory>:
 77a:	00 97       	sbiw	r24, 0x00	; 0
 77c:	31 f0       	breq	.+12     	; 0x78a <qtm_ptc_qtlib_assign_signal_memory+0x10>
 77e:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <qtm_raw_data_measurements_ptr+0x1>
 782:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <qtm_raw_data_measurements_ptr>
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	08 95       	ret
 78a:	8b e0       	ldi	r24, 0x0B	; 11
 78c:	08 95       	ret

0000078e <qtm_enable_sensor_node>:
 78e:	00 97       	sbiw	r24, 0x00	; 0
 790:	c9 f0       	breq	.+50     	; 0x7c4 <qtm_enable_sensor_node+0x36>
 792:	dc 01       	movw	r26, r24
 794:	ed 91       	ld	r30, X+
 796:	fc 91       	ld	r31, X
 798:	11 97       	sbiw	r26, 0x01	; 1
 79a:	20 81       	ld	r18, Z
 79c:	31 81       	ldd	r19, Z+1	; 0x01
 79e:	26 17       	cp	r18, r22
 7a0:	37 07       	cpc	r19, r23
 7a2:	90 f0       	brcs	.+36     	; 0x7c8 <qtm_enable_sensor_node+0x3a>
 7a4:	45 e0       	ldi	r20, 0x05	; 5
 7a6:	46 9f       	mul	r20, r22
 7a8:	90 01       	movw	r18, r0
 7aa:	47 9f       	mul	r20, r23
 7ac:	30 0d       	add	r19, r0
 7ae:	11 24       	eor	r1, r1
 7b0:	14 96       	adiw	r26, 0x04	; 4
 7b2:	ed 91       	ld	r30, X+
 7b4:	fc 91       	ld	r31, X
 7b6:	15 97       	sbiw	r26, 0x05	; 5
 7b8:	e2 0f       	add	r30, r18
 7ba:	f3 1f       	adc	r31, r19
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	80 83       	st	Z, r24
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	08 95       	ret
 7c4:	8b e0       	ldi	r24, 0x0B	; 11
 7c6:	08 95       	ret
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	08 95       	ret

000007cc <qtm_calibrate_sensor_node>:
 7cc:	00 97       	sbiw	r24, 0x00	; 0
 7ce:	d1 f1       	breq	.+116    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 7d0:	dc 01       	movw	r26, r24
 7d2:	ed 91       	ld	r30, X+
 7d4:	fc 91       	ld	r31, X
 7d6:	11 97       	sbiw	r26, 0x01	; 1
 7d8:	20 81       	ld	r18, Z
 7da:	31 81       	ldd	r19, Z+1	; 0x01
 7dc:	26 17       	cp	r18, r22
 7de:	37 07       	cpc	r19, r23
 7e0:	98 f1       	brcs	.+102    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 7e2:	22 81       	ldd	r18, Z+2	; 0x02
 7e4:	14 96       	adiw	r26, 0x04	; 4
 7e6:	ed 91       	ld	r30, X+
 7e8:	fc 91       	ld	r31, X
 7ea:	15 97       	sbiw	r26, 0x05	; 5
 7ec:	20 34       	cpi	r18, 0x40	; 64
 7ee:	59 f4       	brne	.+22     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7f0:	85 e0       	ldi	r24, 0x05	; 5
 7f2:	86 9f       	mul	r24, r22
 7f4:	d0 01       	movw	r26, r0
 7f6:	87 9f       	mul	r24, r23
 7f8:	b0 0d       	add	r27, r0
 7fa:	11 24       	eor	r1, r1
 7fc:	ae 0f       	add	r26, r30
 7fe:	bf 1f       	adc	r27, r31
 800:	84 e3       	ldi	r24, 0x34	; 52
 802:	92 e0       	ldi	r25, 0x02	; 2
 804:	0c c0       	rjmp	.+24     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 806:	20 38       	cpi	r18, 0x80	; 128
 808:	81 f4       	brne	.+32     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 80a:	85 e0       	ldi	r24, 0x05	; 5
 80c:	86 9f       	mul	r24, r22
 80e:	d0 01       	movw	r26, r0
 810:	87 9f       	mul	r24, r23
 812:	b0 0d       	add	r27, r0
 814:	11 24       	eor	r1, r1
 816:	ae 0f       	add	r26, r30
 818:	bf 1f       	adc	r27, r31
 81a:	87 e6       	ldi	r24, 0x67	; 103
 81c:	95 e0       	ldi	r25, 0x05	; 5
 81e:	14 96       	adiw	r26, 0x04	; 4
 820:	9c 93       	st	X, r25
 822:	8e 93       	st	-X, r24
 824:	13 97       	sbiw	r26, 0x03	; 3
 826:	80 e0       	ldi	r24, 0x00	; 0
 828:	01 c0       	rjmp	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 82a:	82 e0       	ldi	r24, 0x02	; 2
 82c:	95 e0       	ldi	r25, 0x05	; 5
 82e:	96 9f       	mul	r25, r22
 830:	90 01       	movw	r18, r0
 832:	97 9f       	mul	r25, r23
 834:	30 0d       	add	r19, r0
 836:	11 24       	eor	r1, r1
 838:	e2 0f       	add	r30, r18
 83a:	f3 1f       	adc	r31, r19
 83c:	90 81       	ld	r25, Z
 83e:	92 60       	ori	r25, 0x02	; 2
 840:	90 83       	st	Z, r25
 842:	08 95       	ret
 844:	8b e0       	ldi	r24, 0x0B	; 11
 846:	08 95       	ret
 848:	82 e0       	ldi	r24, 0x02	; 2
 84a:	08 95       	ret

0000084c <qtm_m324pb_ptc_handler_eoc>:
 84c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
 850:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
 854:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7f80ef>
 858:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <current_measure_channel>
 85c:	f0 91 86 01 	lds	r31, 0x0186	; 0x800186 <current_measure_channel+0x1>
 860:	ee 0f       	add	r30, r30
 862:	ff 1f       	adc	r31, r31
 864:	40 91 de 01 	lds	r20, 0x01DE	; 0x8001de <qtm_raw_data_measurements_ptr>
 868:	50 91 df 01 	lds	r21, 0x01DF	; 0x8001df <qtm_raw_data_measurements_ptr+0x1>
 86c:	e4 0f       	add	r30, r20
 86e:	f5 1f       	adc	r31, r21
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	92 2b       	or	r25, r18
 874:	91 83       	std	Z+1, r25	; 0x01
 876:	80 83       	st	Z, r24
 878:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <good_eocs>
 87c:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <good_eocs+0x1>
 880:	01 96       	adiw	r24, 0x01	; 1
 882:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <good_eocs+0x1>
 886:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <good_eocs>
 88a:	89 2b       	or	r24, r25
 88c:	21 f4       	brne	.+8      	; 0x896 <qtm_m324pb_ptc_handler_eoc+0x4a>
 88e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <ptc_lockups+0x1>
 892:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <ptc_lockups>
 896:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_measure_channel>
 89a:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <current_measure_channel+0x1>
 89e:	01 96       	adiw	r24, 0x01	; 1
 8a0:	90 93 86 01 	sts	0x0186, r25	; 0x800186 <current_measure_channel+0x1>
 8a4:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <current_measure_channel>
 8a8:	0e 94 25 02 	call	0x44a	; 0x44a <select_next_channel_to_measure>
 8ac:	81 11       	cpse	r24, r1
 8ae:	0a c0       	rjmp	.+20     	; 0x8c4 <qtm_m324pb_ptc_handler_eoc+0x78>
 8b0:	84 e0       	ldi	r24, 0x04	; 4
 8b2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <touch_seq_lib_state>
 8b6:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <current_measure_channel>
 8ba:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <current_measure_channel+0x1>
 8be:	0e 94 58 02 	call	0x4b0	; 0x4b0 <qtm_measure_node>
 8c2:	05 c0       	rjmp	.+10     	; 0x8ce <qtm_m324pb_ptc_handler_eoc+0x82>
 8c4:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <ptc_seq_measure_complete_pointer>
 8c8:	f0 91 7f 01 	lds	r31, 0x017F	; 0x80017f <ptc_seq_measure_complete_pointer+0x1>
 8cc:	09 95       	icall
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <ptc_eoc_ok_flag>
 8d4:	08 95       	ret

000008d6 <_exit>:
 8d6:	f8 94       	cli

000008d8 <__stop_program>:
 8d8:	ff cf       	rjmp	.-2      	; 0x8d8 <__stop_program>
