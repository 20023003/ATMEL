
GccApplication6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000006d2  00000766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800110  00800110  00000776  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c09  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d7  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000846  00000000  00000000  00001d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00002564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000490  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a7  00000000  00000000  00002ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002c77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	ac c1       	rjmp	.+856    	; 0x39e <__vector_17>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ed       	ldi	r30, 0xD2	; 210
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 31       	cpi	r26, 0x10	; 16
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e1       	ldi	r26, 0x10	; 16
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ac 31       	cpi	r26, 0x1C	; 28
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	38 d2       	rcall	.+1136   	; 0x534 <main>
  c4:	04 c3       	rjmp	.+1544   	; 0x6ce <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_init_slave>:



void SPI_init_slave() {
	// Set MISO (Master In Slave Out) as output
	DDRB |= (1 << DDB4);
  c8:	bc 9a       	sbi	0x17, 4	; 23
	
	// Enable SPI, Set as Slave
	SPCR |= (1 << SPE);
  ca:	6e 9a       	sbi	0x0d, 6	; 13
	
	// Enable SPI interrupt
	SPCR |= (1 << SPIE);
  cc:	6f 9a       	sbi	0x0d, 7	; 13
  ce:	08 95       	ret

000000d0 <USART_Init>:
}

void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  d0:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
  d4:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN)|(1<<TXEN);
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS)|(3<<UCSZ0);
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  e0:	08 95       	ret

000000e2 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE)) )
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  e6:	8c b9       	out	0x0c, r24	; 12
  e8:	08 95       	ret

000000ea <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC)) )
  ea:	5f 9b       	sbis	0x0b, 7	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
  ee:	8c b1       	in	r24, 0x0c	; 12
}
  f0:	08 95       	ret

000000f2 <LOGIC>:
void LOGIC()
{
	if (receivedString[0] == 'L' && receivedString[1] == '1') {
  f2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <receivedString>
  f6:	8c 34       	cpi	r24, 0x4C	; 76
  f8:	79 f4       	brne	.+30     	; 0x118 <LOGIC+0x26>
  fa:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <receivedString+0x1>
  fe:	81 33       	cpi	r24, 0x31	; 49
 100:	59 f4       	brne	.+22     	; 0x118 <LOGIC+0x26>
		PORTD ^= (1 << PD7);
 102:	82 b3       	in	r24, 0x12	; 18
 104:	80 58       	subi	r24, 0x80	; 128
 106:	82 bb       	out	0x12, r24	; 18
		// Set PE0 high
		PORTF ^= (1 << PF4);
 108:	e2 e6       	ldi	r30, 0x62	; 98
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	90 81       	ld	r25, Z
 10e:	80 e1       	ldi	r24, 0x10	; 16
 110:	89 27       	eor	r24, r25
 112:	80 83       	st	Z, r24
		 USART_Transmit('A');
 114:	81 e4       	ldi	r24, 0x41	; 65
 116:	e5 df       	rcall	.-54     	; 0xe2 <USART_Transmit>
		
	}
	if (strcmp(receivedString, "L2") == 0) {
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	71 e0       	ldi	r23, 0x01	; 1
 11c:	89 e1       	ldi	r24, 0x19	; 25
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	cd d2       	rcall	.+1434   	; 0x6bc <strcmp>
 122:	89 2b       	or	r24, r25
 124:	59 f4       	brne	.+22     	; 0x13c <LOGIC+0x4a>
		PORTD ^= (1 << PD5);
 126:	92 b3       	in	r25, 0x12	; 18
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	98 27       	eor	r25, r24
 12c:	92 bb       	out	0x12, r25	; 18
		PORTF ^= (1 << PF5);
 12e:	e2 e6       	ldi	r30, 0x62	; 98
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	90 81       	ld	r25, Z
 134:	89 27       	eor	r24, r25
		 USART_Transmit('B');
 136:	80 83       	st	Z, r24
 138:	82 e4       	ldi	r24, 0x42	; 66
 13a:	d3 df       	rcall	.-90     	; 0xe2 <USART_Transmit>
		if(PD7==1)
		{
		 resetCount++;	
		}
	}
	if (strcmp(receivedString, "L3") == 0) {
 13c:	63 e0       	ldi	r22, 0x03	; 3
 13e:	71 e0       	ldi	r23, 0x01	; 1
 140:	89 e1       	ldi	r24, 0x19	; 25
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	bb d2       	rcall	.+1398   	; 0x6bc <strcmp>
 146:	89 2b       	or	r24, r25
 148:	81 f4       	brne	.+32     	; 0x16a <LOGIC+0x78>
		// Toggle an output pin to control the relay
		// Assuming the relay is connected to, for example, PORTD pin 7
		PORTD ^= (1 << PD4);
 14a:	92 b3       	in	r25, 0x12	; 18
 14c:	80 e1       	ldi	r24, 0x10	; 16
 14e:	89 27       	eor	r24, r25
 150:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF6);
 152:	e2 e6       	ldi	r30, 0x62	; 98
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	90 81       	ld	r25, Z
 158:	80 e4       	ldi	r24, 0x40	; 64
 15a:	89 27       	eor	r24, r25
		 USART_Transmit('C');
 15c:	80 83       	st	Z, r24
 15e:	83 e4       	ldi	r24, 0x43	; 67
 160:	c0 df       	rcall	.-128    	; 0xe2 <USART_Transmit>
		  resetCount=0;
 162:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <resetCount+0x1>
 166:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <resetCount>
	}
	if (strcmp(receivedString, "F1") == 0) {
 16a:	66 e0       	ldi	r22, 0x06	; 6
 16c:	71 e0       	ldi	r23, 0x01	; 1
 16e:	89 e1       	ldi	r24, 0x19	; 25
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	a4 d2       	rcall	.+1352   	; 0x6bc <strcmp>
 174:	89 2b       	or	r24, r25
 176:	e1 f5       	brne	.+120    	; 0x1f0 <LOGIC+0xfe>
		f++;
 178:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <f>
 17c:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <f+0x1>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <f+0x1>
 186:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <f>
		 resetCount=0;
 18a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <resetCount+0x1>
 18e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <resetCount>
		if(f%2==1)
 192:	81 70       	andi	r24, 0x01	; 1
 194:	90 78       	andi	r25, 0x80	; 128
 196:	99 23       	and	r25, r25
 198:	24 f4       	brge	.+8      	; 0x1a2 <LOGIC+0xb0>
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	8e 6f       	ori	r24, 0xFE	; 254
 19e:	9f 6f       	ori	r25, 0xFF	; 255
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	c9 f4       	brne	.+50     	; 0x1d8 <LOGIC+0xe6>
		{
			PORTD |= (1 << PD6);
 1a6:	96 9a       	sbi	0x12, 6	; 18
			PORTC |= (1 << PC4);
 1a8:	ac 9a       	sbi	0x15, 4	; 21
			 resetCount=0;
 1aa:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <resetCount+0x1>
 1ae:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <resetCount>
			if(storedSpeed==0)
 1b2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <storedSpeed>
 1b6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <storedSpeed+0x1>
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	39 f4       	brne	.+14     	; 0x1cc <LOGIC+0xda>
			{
				spd=1;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <spd+0x1>
 1c6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <spd>
			}
			else
			{
			spd=storedSpeed;	
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <LOGIC+0xe2>
 1cc:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <spd+0x1>
 1d0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <spd>
			}
			
			 USART_Transmit('D');
 1d4:	84 e4       	ldi	r24, 0x44	; 68
 1d6:	85 df       	rcall	.-246    	; 0xe2 <USART_Transmit>
			
		}
		if(f%2==0)
 1d8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <f>
 1dc:	80 fd       	sbrc	r24, 0
 1de:	08 c0       	rjmp	.+16     	; 0x1f0 <LOGIC+0xfe>
		{
			PORTD &=~ (1 << PD6);
			PORTC &=~ (1 << PC4);
 1e0:	96 98       	cbi	0x12, 6	; 18
			spd=0;
 1e2:	ac 98       	cbi	0x15, 4	; 21
 1e4:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <spd+0x1>
			 USART_Transmit('D');
 1e8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <spd>
 1ec:	84 e4       	ldi	r24, 0x44	; 68
		}
	}
	if (strcmp(receivedString, "U1") == 0) {
 1ee:	79 df       	rcall	.-270    	; 0xe2 <USART_Transmit>
 1f0:	69 e0       	ldi	r22, 0x09	; 9
 1f2:	71 e0       	ldi	r23, 0x01	; 1
 1f4:	89 e1       	ldi	r24, 0x19	; 25
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	61 d2       	rcall	.+1218   	; 0x6bc <strcmp>
 1fa:	89 2b       	or	r24, r25
 1fc:	b9 f4       	brne	.+46     	; 0x22c <LOGIC+0x13a>
		if(spd>=1&&spd<=4)
 1fe:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 202:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 206:	9c 01       	movw	r18, r24
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	31 09       	sbc	r19, r1
 20c:	24 30       	cpi	r18, 0x04	; 4
 20e:	31 05       	cpc	r19, r1
 210:	48 f4       	brcc	.+18     	; 0x224 <LOGIC+0x132>
		{
			spd++;
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <spd+0x1>
 218:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <spd>
			storedSpeed=spd;
 21c:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <storedSpeed+0x1>
 220:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <storedSpeed>
		}
		 resetCount=0;
 224:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <resetCount+0x1>
 228:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <resetCount>
		
	}
	if (strcmp(receivedString, "D1") == 0) {
 22c:	6c e0       	ldi	r22, 0x0C	; 12
 22e:	71 e0       	ldi	r23, 0x01	; 1
 230:	89 e1       	ldi	r24, 0x19	; 25
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	43 d2       	rcall	.+1158   	; 0x6bc <strcmp>
 236:	89 2b       	or	r24, r25
 238:	b9 f4       	brne	.+46     	; 0x268 <LOGIC+0x176>
		if(spd>=2&&spd<=5)
 23a:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 23e:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 242:	9c 01       	movw	r18, r24
 244:	22 50       	subi	r18, 0x02	; 2
 246:	31 09       	sbc	r19, r1
 248:	24 30       	cpi	r18, 0x04	; 4
 24a:	31 05       	cpc	r19, r1
 24c:	48 f4       	brcc	.+18     	; 0x260 <LOGIC+0x16e>
		{
			spd--;
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <spd+0x1>
 254:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <spd>
			storedSpeed=spd;
 258:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <storedSpeed+0x1>
 25c:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <storedSpeed>
		}
		 resetCount=0;
 260:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <resetCount+0x1>
 264:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <resetCount>
	}
	if(spd==0)
 268:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 26c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 270:	89 2b       	or	r24, r25
 272:	91 f4       	brne	.+36     	; 0x298 <LOGIC+0x1a6>
	{
		PORTF&=~(1 << PF0);
 274:	e2 e6       	ldi	r30, 0x62	; 98
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8e 7f       	andi	r24, 0xFE	; 254
 27c:	80 83       	st	Z, r24
		PORTF&=~(1 << PF1);
 27e:	80 81       	ld	r24, Z
 280:	8d 7f       	andi	r24, 0xFD	; 253
 282:	80 83       	st	Z, r24
		PORTF&=~(1 << PF2);
 284:	80 81       	ld	r24, Z
 286:	8b 7f       	andi	r24, 0xFB	; 251
 288:	80 83       	st	Z, r24
		PORTF&=~(1 << PF3);
 28a:	80 81       	ld	r24, Z
 28c:	87 7f       	andi	r24, 0xF7	; 247
 28e:	80 83       	st	Z, r24
		//FAN LEDS
		PORTC&=~(1<<3);
 290:	ab 98       	cbi	0x15, 3	; 21
		PORTC&=~(1<<2);
 292:	aa 98       	cbi	0x15, 2	; 21
		PORTC&=~(1<<1);
 294:	a9 98       	cbi	0x15, 1	; 21
		PORTC&=~(1<<0);
 296:	a8 98       	cbi	0x15, 0	; 21
			 
			  
	}
	if(spd==1)
 298:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 29c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	a1 f4       	brne	.+40     	; 0x2cc <LOGIC+0x1da>
	{
		PORTF&=~(1 << PF0);
 2a4:	e2 e6       	ldi	r30, 0x62	; 98
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	8e 7f       	andi	r24, 0xFE	; 254
 2ac:	80 83       	st	Z, r24
		PORTF&=~(1 << PF1);
 2ae:	80 81       	ld	r24, Z
 2b0:	8d 7f       	andi	r24, 0xFD	; 253
 2b2:	80 83       	st	Z, r24
		PORTF|= (1 << PF2);
 2b4:	80 81       	ld	r24, Z
 2b6:	84 60       	ori	r24, 0x04	; 4
		PORTF&=~(1 << PF3);
 2b8:	80 83       	st	Z, r24
 2ba:	80 81       	ld	r24, Z
 2bc:	87 7f       	andi	r24, 0xF7	; 247
		//FAN LEDS
		PORTC&=~(1<<3);
 2be:	80 83       	st	Z, r24
		PORTC&=~(1<<2);
 2c0:	ab 98       	cbi	0x15, 3	; 21
		PORTC&=~(1<<1);
 2c2:	aa 98       	cbi	0x15, 2	; 21
		PORTC&=~(1<<0);
 2c4:	a9 98       	cbi	0x15, 1	; 21
			  USART_Transmit('1');
 2c6:	a8 98       	cbi	0x15, 0	; 21
 2c8:	81 e3       	ldi	r24, 0x31	; 49
 2ca:	0b df       	rcall	.-490    	; 0xe2 <USART_Transmit>
			  
	}
	if(spd==2)
 2cc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 2d0:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 2d4:	02 97       	sbiw	r24, 0x02	; 2
 2d6:	a1 f4       	brne	.+40     	; 0x300 <LOGIC+0x20e>
	{
		PORTF&=~(1 << PF0);
 2d8:	e2 e6       	ldi	r30, 0x62	; 98
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	8e 7f       	andi	r24, 0xFE	; 254
 2e0:	80 83       	st	Z, r24
		PORTF|= (1 << PF1);
 2e2:	80 81       	ld	r24, Z
 2e4:	82 60       	ori	r24, 0x02	; 2
 2e6:	80 83       	st	Z, r24
		PORTF&=~ (1 << PF2);
 2e8:	80 81       	ld	r24, Z
 2ea:	8b 7f       	andi	r24, 0xFB	; 251
		PORTF&=~(1 << PF3);
 2ec:	80 83       	st	Z, r24
 2ee:	80 81       	ld	r24, Z
 2f0:	87 7f       	andi	r24, 0xF7	; 247
		//FAN LEDS
		PORTC|= (1<<3);
 2f2:	80 83       	st	Z, r24
		PORTC&=~(1<<2);
 2f4:	ab 9a       	sbi	0x15, 3	; 21
		PORTC&=~(1<<1);
 2f6:	aa 98       	cbi	0x15, 2	; 21
		PORTC&=~(1<<0);
 2f8:	a9 98       	cbi	0x15, 1	; 21
		 USART_Transmit('2');
 2fa:	a8 98       	cbi	0x15, 0	; 21
 2fc:	82 e3       	ldi	r24, 0x32	; 50
 2fe:	f1 de       	rcall	.-542    	; 0xe2 <USART_Transmit>
	}
	if(spd==3)
 300:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 304:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 308:	03 97       	sbiw	r24, 0x03	; 3
 30a:	a1 f4       	brne	.+40     	; 0x334 <LOGIC+0x242>
	{
		PORTF|= (1 << PF0);
 30c:	e2 e6       	ldi	r30, 0x62	; 98
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	81 60       	ori	r24, 0x01	; 1
 314:	80 83       	st	Z, r24
		PORTF&=~(1 << PF1);
 316:	80 81       	ld	r24, Z
 318:	8d 7f       	andi	r24, 0xFD	; 253
		PORTF&=~ (1 << PF2);
 31a:	80 83       	st	Z, r24
 31c:	80 81       	ld	r24, Z
 31e:	8b 7f       	andi	r24, 0xFB	; 251
		PORTF&=~(1 << PF3);
 320:	80 83       	st	Z, r24
 322:	80 81       	ld	r24, Z
 324:	87 7f       	andi	r24, 0xF7	; 247
		//FAN LEDS
		PORTC|= (1<<3);
 326:	80 83       	st	Z, r24
		PORTC|= (1<<2);
 328:	ab 9a       	sbi	0x15, 3	; 21
		PORTC&=~(1<<1);
 32a:	aa 9a       	sbi	0x15, 2	; 21
		PORTC&=~(1<<0);
 32c:	a9 98       	cbi	0x15, 1	; 21
		 USART_Transmit('3');
 32e:	a8 98       	cbi	0x15, 0	; 21
 330:	83 e3       	ldi	r24, 0x33	; 51
 332:	d7 de       	rcall	.-594    	; 0xe2 <USART_Transmit>
	}
	if(spd==4)
 334:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 338:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 33c:	04 97       	sbiw	r24, 0x04	; 4
 33e:	a1 f4       	brne	.+40     	; 0x368 <LOGIC+0x276>
	{
		PORTF&=~(1 << PF0);
 340:	e2 e6       	ldi	r30, 0x62	; 98
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	8e 7f       	andi	r24, 0xFE	; 254
 348:	80 83       	st	Z, r24
		PORTF|= (1 << PF1);
 34a:	80 81       	ld	r24, Z
 34c:	82 60       	ori	r24, 0x02	; 2
		PORTF|=  (1 << PF2);
 34e:	80 83       	st	Z, r24
 350:	80 81       	ld	r24, Z
 352:	84 60       	ori	r24, 0x04	; 4
		PORTF&=~(1 << PF3);
 354:	80 83       	st	Z, r24
 356:	80 81       	ld	r24, Z
 358:	87 7f       	andi	r24, 0xF7	; 247
		//FAN LEDS
		PORTC|= (1<<3);
 35a:	80 83       	st	Z, r24
		PORTC|= (1<<2);
 35c:	ab 9a       	sbi	0x15, 3	; 21
		PORTC|= (1<<1);
 35e:	aa 9a       	sbi	0x15, 2	; 21
		PORTC&=~(1<<0);
 360:	a9 9a       	sbi	0x15, 1	; 21
		 USART_Transmit('4');
 362:	a8 98       	cbi	0x15, 0	; 21
 364:	84 e3       	ldi	r24, 0x34	; 52
 366:	bd de       	rcall	.-646    	; 0xe2 <USART_Transmit>
	}
	if(spd==5)
 368:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 36c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 370:	05 97       	sbiw	r24, 0x05	; 5
 372:	a1 f4       	brne	.+40     	; 0x39c <LOGIC+0x2aa>
	{
		PORTF&=~(1 << PF0);
 374:	e2 e6       	ldi	r30, 0x62	; 98
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	8e 7f       	andi	r24, 0xFE	; 254
 37c:	80 83       	st	Z, r24
		PORTF&=~(1 << PF1);
 37e:	80 81       	ld	r24, Z
 380:	8d 7f       	andi	r24, 0xFD	; 253
		PORTF&=~(1 << PF2);
 382:	80 83       	st	Z, r24
 384:	80 81       	ld	r24, Z
 386:	8b 7f       	andi	r24, 0xFB	; 251
		PORTF|= (1 << PF3);
 388:	80 83       	st	Z, r24
 38a:	80 81       	ld	r24, Z
 38c:	88 60       	ori	r24, 0x08	; 8
		//FAN LEDS
		PORTC|= (1<<3);
 38e:	80 83       	st	Z, r24
		PORTC|= (1<<2);
 390:	ab 9a       	sbi	0x15, 3	; 21
		PORTC|= (1<<1);
 392:	aa 9a       	sbi	0x15, 2	; 21
		PORTC|= (1<<0);
 394:	a9 9a       	sbi	0x15, 1	; 21
		 USART_Transmit('5');
 396:	a8 9a       	sbi	0x15, 0	; 21
 398:	85 e3       	ldi	r24, 0x35	; 53
 39a:	a3 ce       	rjmp	.-698    	; 0xe2 <USART_Transmit>
 39c:	08 95       	ret

0000039e <__vector_17>:
	
	// Enable SPI interrupt
	SPCR |= (1 << SPIE);
}

ISR(SPI_STC_vect) {
 39e:	1f 92       	push	r1
 3a0:	0f 92       	push	r0
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	0b b6       	in	r0, 0x3b	; 59
 3aa:	0f 92       	push	r0
 3ac:	2f 93       	push	r18
 3ae:	3f 93       	push	r19
 3b0:	4f 93       	push	r20
 3b2:	5f 93       	push	r21
 3b4:	6f 93       	push	r22
 3b6:	7f 93       	push	r23
 3b8:	8f 93       	push	r24
 3ba:	9f 93       	push	r25
 3bc:	af 93       	push	r26
 3be:	bf 93       	push	r27
 3c0:	ef 93       	push	r30
 3c2:	ff 93       	push	r31
	
	char receivedChar = SPDR;
 3c4:	8f b1       	in	r24, 0x0f	; 15
	
	receivedString[stringIndex++] = receivedChar;
 3c6:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	9e 0f       	add	r25, r30
 3ce:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <__data_end>
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	e7 5e       	subi	r30, 0xE7	; 231
 3d6:	fe 4f       	sbci	r31, 0xFE	; 254
 3d8:	80 83       	st	Z, r24
	
	// Check if the end of the string is reached
	if (stringIndex == 2) {
 3da:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 3de:	82 30       	cpi	r24, 0x02	; 2
 3e0:	29 f4       	brne	.+10     	; 0x3ec <__vector_17+0x4e>
		// Null-terminate the string
		receivedString[2] = '\0';
 3e2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <receivedString+0x2>
		
		// Reset the index for the next string
		stringIndex = 0;
 3e6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
		LOGIC();
 3ea:	83 de       	rcall	.-762    	; 0xf2 <LOGIC>
		// Check if the received string is "L1"
		
	}
}
 3ec:	ff 91       	pop	r31
 3ee:	ef 91       	pop	r30
 3f0:	bf 91       	pop	r27
 3f2:	af 91       	pop	r26
 3f4:	9f 91       	pop	r25
 3f6:	8f 91       	pop	r24
 3f8:	7f 91       	pop	r23
 3fa:	6f 91       	pop	r22
 3fc:	5f 91       	pop	r21
 3fe:	4f 91       	pop	r20
 400:	3f 91       	pop	r19
 402:	2f 91       	pop	r18
 404:	0f 90       	pop	r0
 406:	0b be       	out	0x3b, r0	; 59
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <fanlogic>:
	}
}

void fanlogic()
{
if(spd==0)
 412:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 416:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 41a:	89 2b       	or	r24, r25
 41c:	91 f4       	brne	.+36     	; 0x442 <fanlogic+0x30>
{
	PORTF&=~(1 << PF0);
 41e:	e2 e6       	ldi	r30, 0x62	; 98
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	8e 7f       	andi	r24, 0xFE	; 254
 426:	80 83       	st	Z, r24
	PORTF&=~(1 << PF1);
 428:	80 81       	ld	r24, Z
 42a:	8d 7f       	andi	r24, 0xFD	; 253
 42c:	80 83       	st	Z, r24
	PORTF&=~(1 << PF2);
 42e:	80 81       	ld	r24, Z
 430:	8b 7f       	andi	r24, 0xFB	; 251
 432:	80 83       	st	Z, r24
	PORTF&=~(1 << PF3);
 434:	80 81       	ld	r24, Z
 436:	87 7f       	andi	r24, 0xF7	; 247
 438:	80 83       	st	Z, r24
	//FAN LEDS
	PORTC&=~(1<<3);
 43a:	ab 98       	cbi	0x15, 3	; 21
	PORTC&=~(1<<2);
 43c:	aa 98       	cbi	0x15, 2	; 21
	PORTC&=~(1<<1);
 43e:	a9 98       	cbi	0x15, 1	; 21
	PORTC&=~(1<<0);
 440:	a8 98       	cbi	0x15, 0	; 21
}
if(spd==1)
 442:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 446:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	91 f4       	brne	.+36     	; 0x472 <fanlogic+0x60>
{
	PORTF&=~(1 << PF0);
 44e:	e2 e6       	ldi	r30, 0x62	; 98
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	80 81       	ld	r24, Z
 454:	8e 7f       	andi	r24, 0xFE	; 254
 456:	80 83       	st	Z, r24
	PORTF&=~(1 << PF1);
 458:	80 81       	ld	r24, Z
 45a:	8d 7f       	andi	r24, 0xFD	; 253
 45c:	80 83       	st	Z, r24
	PORTF|= (1 << PF2);
 45e:	80 81       	ld	r24, Z
 460:	84 60       	ori	r24, 0x04	; 4
 462:	80 83       	st	Z, r24
	PORTF&=~(1 << PF3);
 464:	80 81       	ld	r24, Z
 466:	87 7f       	andi	r24, 0xF7	; 247
 468:	80 83       	st	Z, r24
	//FAN LEDS
	PORTC&=~(1<<3);
 46a:	ab 98       	cbi	0x15, 3	; 21
	PORTC&=~(1<<2);
 46c:	aa 98       	cbi	0x15, 2	; 21
	PORTC&=~(1<<1);
 46e:	a9 98       	cbi	0x15, 1	; 21
	PORTC&=~(1<<0);
 470:	a8 98       	cbi	0x15, 0	; 21
}
if(spd==2)
 472:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 476:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 47a:	02 97       	sbiw	r24, 0x02	; 2
 47c:	91 f4       	brne	.+36     	; 0x4a2 <fanlogic+0x90>
{
	PORTF&=~(1 << PF0);
 47e:	e2 e6       	ldi	r30, 0x62	; 98
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	8e 7f       	andi	r24, 0xFE	; 254
 486:	80 83       	st	Z, r24
	PORTF|= (1 << PF1);
 488:	80 81       	ld	r24, Z
 48a:	82 60       	ori	r24, 0x02	; 2
 48c:	80 83       	st	Z, r24
	PORTF&=~ (1 << PF2);
 48e:	80 81       	ld	r24, Z
 490:	8b 7f       	andi	r24, 0xFB	; 251
 492:	80 83       	st	Z, r24
	PORTF&=~(1 << PF3);
 494:	80 81       	ld	r24, Z
 496:	87 7f       	andi	r24, 0xF7	; 247
 498:	80 83       	st	Z, r24
	//FAN LEDS
	PORTC|= (1<<3);
 49a:	ab 9a       	sbi	0x15, 3	; 21
	PORTC&=~(1<<2);
 49c:	aa 98       	cbi	0x15, 2	; 21
	PORTC&=~(1<<1);
 49e:	a9 98       	cbi	0x15, 1	; 21
	PORTC&=~(1<<0);
 4a0:	a8 98       	cbi	0x15, 0	; 21
}
if(spd==3)
 4a2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 4a6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 4aa:	03 97       	sbiw	r24, 0x03	; 3
 4ac:	91 f4       	brne	.+36     	; 0x4d2 <fanlogic+0xc0>
{
	PORTF|= (1 << PF0);
 4ae:	e2 e6       	ldi	r30, 0x62	; 98
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	80 81       	ld	r24, Z
 4b4:	81 60       	ori	r24, 0x01	; 1
 4b6:	80 83       	st	Z, r24
	PORTF&=~(1 << PF1);
 4b8:	80 81       	ld	r24, Z
 4ba:	8d 7f       	andi	r24, 0xFD	; 253
 4bc:	80 83       	st	Z, r24
	PORTF&=~ (1 << PF2);
 4be:	80 81       	ld	r24, Z
 4c0:	8b 7f       	andi	r24, 0xFB	; 251
 4c2:	80 83       	st	Z, r24
	PORTF&=~(1 << PF3);
 4c4:	80 81       	ld	r24, Z
 4c6:	87 7f       	andi	r24, 0xF7	; 247
 4c8:	80 83       	st	Z, r24
	//FAN LEDS
	PORTC|= (1<<3);
 4ca:	ab 9a       	sbi	0x15, 3	; 21
	PORTC|= (1<<2);
 4cc:	aa 9a       	sbi	0x15, 2	; 21
	PORTC&=~(1<<1);
 4ce:	a9 98       	cbi	0x15, 1	; 21
	PORTC&=~(1<<0);
 4d0:	a8 98       	cbi	0x15, 0	; 21
	
}
if(spd==4)
 4d2:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 4d6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 4da:	04 97       	sbiw	r24, 0x04	; 4
 4dc:	91 f4       	brne	.+36     	; 0x502 <fanlogic+0xf0>
{
	PORTF&=~(1 << PF0);
 4de:	e2 e6       	ldi	r30, 0x62	; 98
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	8e 7f       	andi	r24, 0xFE	; 254
 4e6:	80 83       	st	Z, r24
	PORTF|= (1 << PF1);
 4e8:	80 81       	ld	r24, Z
 4ea:	82 60       	ori	r24, 0x02	; 2
 4ec:	80 83       	st	Z, r24
	PORTF|=  (1 << PF2);
 4ee:	80 81       	ld	r24, Z
 4f0:	84 60       	ori	r24, 0x04	; 4
 4f2:	80 83       	st	Z, r24
	PORTF&=~(1 << PF3);
 4f4:	80 81       	ld	r24, Z
 4f6:	87 7f       	andi	r24, 0xF7	; 247
 4f8:	80 83       	st	Z, r24
	//FAN LEDS
	PORTC|= (1<<3);
 4fa:	ab 9a       	sbi	0x15, 3	; 21
	PORTC|= (1<<2);
 4fc:	aa 9a       	sbi	0x15, 2	; 21
	PORTC|= (1<<1);
 4fe:	a9 9a       	sbi	0x15, 1	; 21
	PORTC&=~(1<<0);
 500:	a8 98       	cbi	0x15, 0	; 21
	
}
if(spd==5)
 502:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <spd>
 506:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <spd+0x1>
 50a:	05 97       	sbiw	r24, 0x05	; 5
 50c:	91 f4       	brne	.+36     	; 0x532 <fanlogic+0x120>
{
	PORTF&=~(1 << PF0);
 50e:	e2 e6       	ldi	r30, 0x62	; 98
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	8e 7f       	andi	r24, 0xFE	; 254
 516:	80 83       	st	Z, r24
	PORTF&=~(1 << PF1);
 518:	80 81       	ld	r24, Z
 51a:	8d 7f       	andi	r24, 0xFD	; 253
 51c:	80 83       	st	Z, r24
	PORTF&=~(1 << PF2);
 51e:	80 81       	ld	r24, Z
 520:	8b 7f       	andi	r24, 0xFB	; 251
 522:	80 83       	st	Z, r24
	PORTF|= (1 << PF3);
 524:	80 81       	ld	r24, Z
 526:	88 60       	ori	r24, 0x08	; 8
 528:	80 83       	st	Z, r24
	//FAN LEDS
	PORTC|= (1<<3);
 52a:	ab 9a       	sbi	0x15, 3	; 21
	PORTC|= (1<<2);
 52c:	aa 9a       	sbi	0x15, 2	; 21
	PORTC|= (1<<1);
 52e:	a9 9a       	sbi	0x15, 1	; 21
	PORTC|= (1<<0);
 530:	a8 9a       	sbi	0x15, 0	; 21
 532:	08 95       	ret

00000534 <main>:
int main( void )
{
	//unsigned char str[18] = "\n\rExplore Embedded";
	//unsigned char strLenght = 18;
	//unsigned char i = 0;
	SPI_init_slave();
 534:	c9 dd       	rcall	.-1134   	; 0xc8 <SPI_init_slave>
	sei();
 536:	78 94       	sei
	DDRF=(1<<PF4)|(1<<PF5)|(1<<PF6)|(1<<PF0)|(1<<PF1)|(1<<PF2)|(1<<PF3);
 538:	8f e7       	ldi	r24, 0x7F	; 127
 53a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRD=(1<<PD7)|(1<<PD5)|(1<<PD4)|(1<<PD6);
 53e:	80 ef       	ldi	r24, 0xF0	; 240
 540:	81 bb       	out	0x11, r24	; 17
	DDRC|=(1<<PC4)|(1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3);;
 542:	84 b3       	in	r24, 0x14	; 20
 544:	8f 61       	ori	r24, 0x1F	; 31
 546:	84 bb       	out	0x14, r24	; 20
	USART_Init ( MYUBRR );
 548:	87 e6       	ldi	r24, 0x67	; 103
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	c1 dd       	rcall	.-1150   	; 0xd0 <USART_Init>
				PORTD |= (1 << PD4);
				PORTF |= (1 << PF6);
			}
			if (receivedData == '0') {
				PORTD &=~ (1 << PD4);
				PORTF&=~ (1 << PF6);
 54e:	c2 e6       	ldi	r28, 0x62	; 98
 550:	d0 e0       	ldi	r29, 0x00	; 0
			if (receivedData == '4') {
				spd=4;
				storedSpeed=spd;
			}
			if (receivedData == '5') {
				spd=5;
 552:	0f 2e       	mov	r0, r31
 554:	f5 e0       	ldi	r31, 0x05	; 5
 556:	af 2e       	mov	r10, r31
 558:	b1 2c       	mov	r11, r1
 55a:	f0 2d       	mov	r31, r0
			if (receivedData == '3') {
				spd=3;
				storedSpeed=spd;
			}
			if (receivedData == '4') {
				spd=4;
 55c:	68 94       	set
 55e:	cc 24       	eor	r12, r12
 560:	c2 f8       	bld	r12, 2
 562:	d1 2c       	mov	r13, r1
			if (receivedData == '2') {
				spd=2;
				storedSpeed=spd;
			}
			if (receivedData == '3') {
				spd=3;
 564:	0f 2e       	mov	r0, r31
 566:	f3 e0       	ldi	r31, 0x03	; 3
 568:	ef 2e       	mov	r14, r31
 56a:	f1 2c       	mov	r15, r1
 56c:	f0 2d       	mov	r31, r0
			if (receivedData == '1') {
				spd=1;
				storedSpeed=spd;
			}
			if (receivedData == '2') {
				spd=2;
 56e:	68 94       	set
 570:	88 24       	eor	r8, r8
 572:	81 f8       	bld	r8, 1
 574:	91 2c       	mov	r9, r1
		}
		if (receivedData == 'U'&& f==1) {
			// Wait for the next character
			receivedData = USART_Receive();
			if (receivedData == '1') {
				spd=1;
 576:	01 e0       	ldi	r16, 0x01	; 1
	DDRC|=(1<<PC4)|(1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3);;
	USART_Init ( MYUBRR );

	while(1)
	{
		char receivedData=USART_Receive();
 578:	10 e0       	ldi	r17, 0x00	; 0
		if (receivedData == 'L') {
 57a:	b7 dd       	rcall	.-1170   	; 0xea <USART_Receive>
 57c:	8c 34       	cpi	r24, 0x4C	; 76
			receivedData = USART_Receive();
 57e:	81 f4       	brne	.+32     	; 0x5a0 <main+0x6c>
 580:	b4 dd       	rcall	.-1176   	; 0xea <USART_Receive>
			if (receivedData == '1') {
 582:	81 33       	cpi	r24, 0x31	; 49
 584:	29 f4       	brne	.+10     	; 0x590 <main+0x5c>
				PORTD |= (1 << PD7);
 586:	97 9a       	sbi	0x12, 7	; 18
				PORTF |= (1 << PF4);
 588:	88 81       	ld	r24, Y
 58a:	80 61       	ori	r24, 0x10	; 16
 58c:	88 83       	st	Y, r24
 58e:	8a c0       	rjmp	.+276    	; 0x6a4 <main+0x170>
			}
			if (receivedData == '0') {
 590:	80 33       	cpi	r24, 0x30	; 48
 592:	09 f0       	breq	.+2      	; 0x596 <main+0x62>
 594:	48 c0       	rjmp	.+144    	; 0x626 <main+0xf2>
					PORTD &=~ (1 << PD7);
 596:	97 98       	cbi	0x12, 7	; 18
					PORTF &=~  (1 << PF4);
 598:	88 81       	ld	r24, Y
 59a:	8f 7e       	andi	r24, 0xEF	; 239
 59c:	88 83       	st	Y, r24
			}
		}
		else if (receivedData == 'T') {
 59e:	82 c0       	rjmp	.+260    	; 0x6a4 <main+0x170>
 5a0:	84 35       	cpi	r24, 0x54	; 84
			receivedData = USART_Receive();
 5a2:	79 f4       	brne	.+30     	; 0x5c2 <main+0x8e>
 5a4:	a2 dd       	rcall	.-1212   	; 0xea <USART_Receive>
			if (receivedData == '1') {
 5a6:	81 33       	cpi	r24, 0x31	; 49
 5a8:	29 f4       	brne	.+10     	; 0x5b4 <main+0x80>
				PORTD |= (1 << PD5);
 5aa:	95 9a       	sbi	0x12, 5	; 18
				PORTF |= (1 << PF5);
 5ac:	88 81       	ld	r24, Y
 5ae:	80 62       	ori	r24, 0x20	; 32
 5b0:	88 83       	st	Y, r24
 5b2:	78 c0       	rjmp	.+240    	; 0x6a4 <main+0x170>
			}
			if (receivedData == '0') {
 5b4:	80 33       	cpi	r24, 0x30	; 48
 5b6:	b9 f5       	brne	.+110    	; 0x626 <main+0xf2>
				PORTD &=~ (1 << PD5);
 5b8:	95 98       	cbi	0x12, 5	; 18
				PORTF &=~ (1 << PF5);
 5ba:	88 81       	ld	r24, Y
 5bc:	8f 7d       	andi	r24, 0xDF	; 223
 5be:	88 83       	st	Y, r24
			}
		}
		else if (receivedData == 'N') {
 5c0:	71 c0       	rjmp	.+226    	; 0x6a4 <main+0x170>
 5c2:	8e 34       	cpi	r24, 0x4E	; 78
			receivedData = USART_Receive();
 5c4:	79 f4       	brne	.+30     	; 0x5e4 <main+0xb0>
 5c6:	91 dd       	rcall	.-1246   	; 0xea <USART_Receive>
			if (receivedData == '1') {
 5c8:	81 33       	cpi	r24, 0x31	; 49
 5ca:	29 f4       	brne	.+10     	; 0x5d6 <main+0xa2>
				PORTD |= (1 << PD4);
 5cc:	94 9a       	sbi	0x12, 4	; 18
				PORTF |= (1 << PF6);
 5ce:	88 81       	ld	r24, Y
 5d0:	80 64       	ori	r24, 0x40	; 64
 5d2:	88 83       	st	Y, r24
 5d4:	67 c0       	rjmp	.+206    	; 0x6a4 <main+0x170>
			}
			if (receivedData == '0') {
 5d6:	80 33       	cpi	r24, 0x30	; 48
 5d8:	31 f5       	brne	.+76     	; 0x626 <main+0xf2>
				PORTD &=~ (1 << PD4);
 5da:	94 98       	cbi	0x12, 4	; 18
				PORTF&=~ (1 << PF6);
 5dc:	88 81       	ld	r24, Y
 5de:	8f 7b       	andi	r24, 0xBF	; 191
 5e0:	88 83       	st	Y, r24
			}
		}
		else if(receivedData == 'F')
 5e2:	60 c0       	rjmp	.+192    	; 0x6a4 <main+0x170>
 5e4:	86 34       	cpi	r24, 0x46	; 70
		{
			receivedData = USART_Receive();
 5e6:	f9 f4       	brne	.+62     	; 0x626 <main+0xf2>
 5e8:	80 dd       	rcall	.-1280   	; 0xea <USART_Receive>
		if (receivedData == '1') {
 5ea:	81 33       	cpi	r24, 0x31	; 49
 5ec:	79 f4       	brne	.+30     	; 0x60c <main+0xd8>
			
				PORTD |= (1 << PD6);
 5ee:	96 9a       	sbi	0x12, 6	; 18
				PORTC |= (1 << PC4);
 5f0:	ac 9a       	sbi	0x15, 4	; 21
				spd=storedSpeed;
 5f2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <storedSpeed>
 5f6:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <storedSpeed+0x1>
 5fa:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <spd+0x1>
 5fe:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <spd>
				f=1;
 602:	10 93 18 01 	sts	0x0118, r17	; 0x800118 <f+0x1>
 606:	00 93 17 01 	sts	0x0117, r16	; 0x800117 <f>
 60a:	4c c0       	rjmp	.+152    	; 0x6a4 <main+0x170>
			}
			if (receivedData == '0') {
 60c:	80 33       	cpi	r24, 0x30	; 48
 60e:	59 f4       	brne	.+22     	; 0x626 <main+0xf2>
			{
				PORTD &=~ (1 << PD6);
 610:	96 98       	cbi	0x12, 6	; 18
				PORTC &=~ (1 << PC4);
 612:	ac 98       	cbi	0x15, 4	; 21
				spd=0;
 614:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <spd+0x1>
 618:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <spd>
				f=0;
 61c:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <f+0x1>
 620:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <f>
 624:	3f c0       	rjmp	.+126    	; 0x6a4 <main+0x170>
			}
			
		}
		}
		if (receivedData == 'U'&& f==1) {
 626:	85 35       	cpi	r24, 0x55	; 85
 628:	e9 f5       	brne	.+122    	; 0x6a4 <main+0x170>
 62a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <f>
 62e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <f+0x1>
 632:	01 97       	sbiw	r24, 0x01	; 1
			// Wait for the next character
			receivedData = USART_Receive();
 634:	b9 f5       	brne	.+110    	; 0x6a4 <main+0x170>
 636:	59 dd       	rcall	.-1358   	; 0xea <USART_Receive>
			if (receivedData == '1') {
 638:	81 33       	cpi	r24, 0x31	; 49
 63a:	49 f4       	brne	.+18     	; 0x64e <main+0x11a>
				spd=1;
 63c:	10 93 16 01 	sts	0x0116, r17	; 0x800116 <spd+0x1>
 640:	00 93 15 01 	sts	0x0115, r16	; 0x800115 <spd>
				storedSpeed=spd;
 644:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <storedSpeed+0x1>
 648:	00 93 13 01 	sts	0x0113, r16	; 0x800113 <storedSpeed>
 64c:	16 c0       	rjmp	.+44     	; 0x67a <main+0x146>
			}
			if (receivedData == '2') {
 64e:	82 33       	cpi	r24, 0x32	; 50
 650:	49 f4       	brne	.+18     	; 0x664 <main+0x130>
				spd=2;
 652:	90 92 16 01 	sts	0x0116, r9	; 0x800116 <spd+0x1>
 656:	80 92 15 01 	sts	0x0115, r8	; 0x800115 <spd>
				storedSpeed=spd;
 65a:	90 92 14 01 	sts	0x0114, r9	; 0x800114 <storedSpeed+0x1>
 65e:	80 92 13 01 	sts	0x0113, r8	; 0x800113 <storedSpeed>
 662:	16 c0       	rjmp	.+44     	; 0x690 <main+0x15c>
			}
			if (receivedData == '3') {
 664:	83 33       	cpi	r24, 0x33	; 51
 666:	49 f4       	brne	.+18     	; 0x67a <main+0x146>
				spd=3;
 668:	f0 92 16 01 	sts	0x0116, r15	; 0x800116 <spd+0x1>
 66c:	e0 92 15 01 	sts	0x0115, r14	; 0x800115 <spd>
				storedSpeed=spd;
 670:	f0 92 14 01 	sts	0x0114, r15	; 0x800114 <storedSpeed+0x1>
 674:	e0 92 13 01 	sts	0x0113, r14	; 0x800113 <storedSpeed>
 678:	15 c0       	rjmp	.+42     	; 0x6a4 <main+0x170>
			}
			if (receivedData == '4') {
 67a:	84 33       	cpi	r24, 0x34	; 52
 67c:	49 f4       	brne	.+18     	; 0x690 <main+0x15c>
				spd=4;
 67e:	d0 92 16 01 	sts	0x0116, r13	; 0x800116 <spd+0x1>
 682:	c0 92 15 01 	sts	0x0115, r12	; 0x800115 <spd>
				storedSpeed=spd;
 686:	d0 92 14 01 	sts	0x0114, r13	; 0x800114 <storedSpeed+0x1>
 68a:	c0 92 13 01 	sts	0x0113, r12	; 0x800113 <storedSpeed>
 68e:	0a c0       	rjmp	.+20     	; 0x6a4 <main+0x170>
			}
			if (receivedData == '5') {
 690:	85 33       	cpi	r24, 0x35	; 53
 692:	41 f4       	brne	.+16     	; 0x6a4 <main+0x170>
				spd=5;
 694:	b0 92 16 01 	sts	0x0116, r11	; 0x800116 <spd+0x1>
 698:	a0 92 15 01 	sts	0x0115, r10	; 0x800115 <spd>
				storedSpeed=spd;
 69c:	b0 92 14 01 	sts	0x0114, r11	; 0x800114 <storedSpeed+0x1>
 6a0:	a0 92 13 01 	sts	0x0113, r10	; 0x800113 <storedSpeed>
			}
			
		}
		fanlogic();
 6a4:	b6 de       	rcall	.-660    	; 0x412 <fanlogic>
		if(resetCount==10){
 6a6:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <resetCount>
 6aa:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <resetCount+0x1>
 6ae:	0a 97       	sbiw	r24, 0x0a	; 10
 6b0:	09 f0       	breq	.+2      	; 0x6b4 <main+0x180>
			 USART_Transmit('Z');
 6b2:	63 cf       	rjmp	.-314    	; 0x57a <main+0x46>
 6b4:	8a e5       	ldi	r24, 0x5A	; 90
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	14 dd       	rcall	.-1496   	; 0xe2 <USART_Transmit>
 6ba:	5f cf       	rjmp	.-322    	; 0x57a <main+0x46>

000006bc <strcmp>:
 6bc:	fb 01       	movw	r30, r22
 6be:	dc 01       	movw	r26, r24
 6c0:	8d 91       	ld	r24, X+
 6c2:	01 90       	ld	r0, Z+
 6c4:	80 19       	sub	r24, r0
 6c6:	01 10       	cpse	r0, r1
 6c8:	d9 f3       	breq	.-10     	; 0x6c0 <strcmp+0x4>
 6ca:	99 0b       	sbc	r25, r25
 6cc:	08 95       	ret

000006ce <_exit>:
 6ce:	f8 94       	cli

000006d0 <__stop_program>:
 6d0:	ff cf       	rjmp	.-2      	; 0x6d0 <__stop_program>
