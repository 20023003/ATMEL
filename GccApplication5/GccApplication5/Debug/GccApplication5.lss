
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000456  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000456  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800114  00800114  000004fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b09  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c1  00000000  00000000  000010c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000577  00000000  00000000  00001986  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000cc  00000000  00000000  00001f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047a  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000144  00000000  00000000  00002446  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000258a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	c3 c1       	rjmp	.+902    	; 0x3cc <__vector_17>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e5       	ldi	r30, 0x56	; 86
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e1       	ldi	r26, 0x14	; 20
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 32       	cpi	r26, 0x27	; 39
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	17 d0       	rcall	.+46     	; 0xf2 <main>
  c4:	c6 c1       	rjmp	.+908    	; 0x452 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SPI_init_slave>:



void SPI_init_slave() {
	// Set MISO (Master In Slave Out) as output
	DDRB |= (1 << DDB4);
  c8:	bc 9a       	sbi	0x17, 4	; 23
	
	// Enable SPI, Set as Slave
	SPCR |= (1 << SPE);
  ca:	6e 9a       	sbi	0x0d, 6	; 13
	
	// Enable SPI interrupt
	SPCR |= (1 << SPIE);
  cc:	6f 9a       	sbi	0x0d, 7	; 13
  ce:	08 95       	ret

000000d0 <USART_Init>:
}

void USART_Init( unsigned int ubrr )
{
	/* Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
  d0:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
  d4:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN)|(1<<TXEN);
  d6:	88 e1       	ldi	r24, 0x18	; 24
  d8:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS)|(3<<UCSZ0);
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
  e0:	08 95       	ret

000000e2 <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE)) )
  e2:	5d 9b       	sbis	0x0b, 5	; 11
  e4:	fe cf       	rjmp	.-4      	; 0xe2 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
  e6:	8c b9       	out	0x0c, r24	; 12
  e8:	08 95       	ret

000000ea <USART_Receive>:
}

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC)) )
  ea:	5f 9b       	sbis	0x0b, 7	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
  ee:	8c b1       	in	r24, 0x0c	; 12
}
  f0:	08 95       	ret

000000f2 <main>:
}


int main(void) {
	// Initialize SPI as a slave
	SPI_init_slave();
  f2:	ea df       	rcall	.-44     	; 0xc8 <SPI_init_slave>
	
	
	USART_Init ( MYUBRR );
  f4:	87 e0       	ldi	r24, 0x07	; 7
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	eb df       	rcall	.-42     	; 0xd0 <USART_Init>
	// Enable global interrupts
	sei();
  fa:	78 94       	sei
	DDRD|=(1<<7)|(1<<5)|(1<<6)|(1<<4);
  fc:	81 b3       	in	r24, 0x11	; 17
  fe:	80 6f       	ori	r24, 0xF0	; 240
 100:	81 bb       	out	0x11, r24	; 17
	DDRF|=(1<<4)|(1<<5)|(1<<6)|(1<<3)|(1<<2)|(1<<1)|(1<<0);
 102:	e1 e6       	ldi	r30, 0x61	; 97
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	8f 67       	ori	r24, 0x7F	; 127
 10a:	80 83       	st	Z, r24
	DDRC|=(1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0)|(1<<6)|(1<<7);
 10c:	84 b3       	in	r24, 0x14	; 20
 10e:	8f 6d       	ori	r24, 0xDF	; 223
 110:	84 bb       	out	0x14, r24	; 20
	PORTC=(1<<7);
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	85 bb       	out	0x15, r24	; 21
	else if (receivedData == 0xCC) {
			PORTD ^= (1 << PD4);
			PORTF ^= (1 << PF6);
	}
	else if (receivedData == 0xDD) {
		PORTD ^= (1 << PD6);
 116:	68 94       	set
 118:	ff 24       	eor	r15, r15
 11a:	f6 f8       	bld	r15, 6
		PORTC ^= (1 << PC4);
 11c:	10 e1       	ldi	r17, 0x10	; 16
		PORTD ^= (1 << PD5);
		PORTF ^= (1 << PF5);
	}
	else if (receivedData == 0xCC) {
			PORTD ^= (1 << PD4);
			PORTF ^= (1 << PF6);
 11e:	c2 e6       	ldi	r28, 0x62	; 98
		PORTD ^= (1 << PD7);
		// Set PE0 high
		PORTF ^= (1 << PF4);
	}
	else if (receivedData == 0xBB) {
		PORTD ^= (1 << PD5);
 120:	d0 e0       	ldi	r29, 0x00	; 0
	

	// Your main code goes here

	while (1) {
	uint8_t receivedData = USART_Receive();
 122:	00 e2       	ldi	r16, 0x20	; 32
 124:	e2 df       	rcall	.-60     	; 0xea <USART_Receive>

	if (receivedData == 0xAA) {
 126:	8a 3a       	cpi	r24, 0xAA	; 170
 128:	39 f4       	brne	.+14     	; 0x138 <main+0x46>
		PORTD ^= (1 << PD7);
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	80 58       	subi	r24, 0x80	; 128
 12e:	82 bb       	out	0x12, r24	; 18
		// Set PE0 high
		PORTF ^= (1 << PF4);
 130:	88 81       	ld	r24, Y
 132:	81 27       	eor	r24, r17
 134:	88 83       	st	Y, r24
 136:	f6 cf       	rjmp	.-20     	; 0x124 <main+0x32>
	}
	else if (receivedData == 0xBB) {
 138:	8b 3b       	cpi	r24, 0xBB	; 187
 13a:	39 f4       	brne	.+14     	; 0x14a <main+0x58>
		PORTD ^= (1 << PD5);
 13c:	82 b3       	in	r24, 0x12	; 18
 13e:	80 27       	eor	r24, r16
 140:	82 bb       	out	0x12, r24	; 18
		PORTF ^= (1 << PF5);
 142:	88 81       	ld	r24, Y
 144:	80 27       	eor	r24, r16
 146:	88 83       	st	Y, r24
 148:	ed cf       	rjmp	.-38     	; 0x124 <main+0x32>
	}
	else if (receivedData == 0xCC) {
 14a:	8c 3c       	cpi	r24, 0xCC	; 204
 14c:	39 f4       	brne	.+14     	; 0x15c <main+0x6a>
			PORTD ^= (1 << PD4);
 14e:	82 b3       	in	r24, 0x12	; 18
 150:	81 27       	eor	r24, r17
 152:	82 bb       	out	0x12, r24	; 18
			PORTF ^= (1 << PF6);
 154:	88 81       	ld	r24, Y
 156:	8f 25       	eor	r24, r15
 158:	88 83       	st	Y, r24
 15a:	e4 cf       	rjmp	.-56     	; 0x124 <main+0x32>
	}
	else if (receivedData == 0xDD) {
 15c:	8d 3d       	cpi	r24, 0xDD	; 221
 15e:	11 f7       	brne	.-60     	; 0x124 <main+0x32>
		PORTD ^= (1 << PD6);
 160:	82 b3       	in	r24, 0x12	; 18
 162:	8f 25       	eor	r24, r15
 164:	82 bb       	out	0x12, r24	; 18
		PORTC ^= (1 << PC4);
 166:	85 b3       	in	r24, 0x15	; 21
 168:	81 27       	eor	r24, r17
 16a:	85 bb       	out	0x15, r24	; 21
 16c:	db cf       	rjmp	.-74     	; 0x124 <main+0x32>

0000016e <LOGIC>:
	return UDR0;
}


void LOGIC()
{ if (receivedString[0] == 'L' && receivedString[1] == '1') {
 16e:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <receivedString>
 172:	8c 34       	cpi	r24, 0x4C	; 76
 174:	01 f5       	brne	.+64     	; 0x1b6 <LOGIC+0x48>
 176:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <receivedString+0x1>
 17a:	81 33       	cpi	r24, 0x31	; 49
 17c:	e1 f4       	brne	.+56     	; 0x1b6 <LOGIC+0x48>
	PORTD ^= (1 << PD7);
 17e:	82 b3       	in	r24, 0x12	; 18
 180:	80 58       	subi	r24, 0x80	; 128
 182:	82 bb       	out	0x12, r24	; 18
	// Set PE0 high
	PORTF ^= (1 << PF6);
 184:	e2 e6       	ldi	r30, 0x62	; 98
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	90 81       	ld	r25, Z
 18a:	80 e4       	ldi	r24, 0x40	; 64
 18c:	89 27       	eor	r24, r25
 18e:	80 83       	st	Z, r24
	USART_Transmit( str[i++] );
 190:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <i>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	8e 0f       	add	r24, r30
 198:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <i>
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	ef 5f       	subi	r30, 0xFF	; 255
 1a0:	fe 4f       	sbci	r31, 0xFE	; 254
 1a2:	80 81       	ld	r24, Z
 1a4:	9e df       	rcall	.-196    	; 0xe2 <USART_Transmit>
	if(i >= strLenght)
 1a6:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <i>
 1aa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ae:	98 17       	cp	r25, r24
 1b0:	10 f0       	brcs	.+4      	; 0x1b6 <LOGIC+0x48>
	i = 0;
 1b2:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <i>
}
if (strcmp(receivedString, "L2") == 0) {
 1b6:	65 e0       	ldi	r22, 0x05	; 5
 1b8:	71 e0       	ldi	r23, 0x01	; 1
 1ba:	84 e2       	ldi	r24, 0x24	; 36
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	40 d1       	rcall	.+640    	; 0x440 <strcmp>
 1c0:	89 2b       	or	r24, r25
 1c2:	49 f4       	brne	.+18     	; 0x1d6 <LOGIC+0x68>
	// Toggle an output pin to control the relay
	// Assuming the relay is connected to, for example, PORTD pin 7
	PORTD ^= (1 << PD5);
 1c4:	92 b3       	in	r25, 0x12	; 18
 1c6:	80 e2       	ldi	r24, 0x20	; 32
 1c8:	98 27       	eor	r25, r24
 1ca:	92 bb       	out	0x12, r25	; 18
	PORTF ^= (1 << PF5);
 1cc:	e2 e6       	ldi	r30, 0x62	; 98
 1ce:	f0 e0       	ldi	r31, 0x00	; 0
 1d0:	90 81       	ld	r25, Z
 1d2:	89 27       	eor	r24, r25
 1d4:	80 83       	st	Z, r24
}
if (strcmp(receivedString, "L3") == 0) {
 1d6:	68 e0       	ldi	r22, 0x08	; 8
 1d8:	71 e0       	ldi	r23, 0x01	; 1
 1da:	84 e2       	ldi	r24, 0x24	; 36
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	30 d1       	rcall	.+608    	; 0x440 <strcmp>
 1e0:	89 2b       	or	r24, r25
 1e2:	51 f4       	brne	.+20     	; 0x1f8 <LOGIC+0x8a>
	// Toggle an output pin to control the relay
	// Assuming the relay is connected to, for example, PORTD pin 7
	PORTD ^= (1 << PD4);
 1e4:	92 b3       	in	r25, 0x12	; 18
 1e6:	80 e1       	ldi	r24, 0x10	; 16
 1e8:	89 27       	eor	r24, r25
 1ea:	82 bb       	out	0x12, r24	; 18
	PORTF ^= (1 << PF6);
 1ec:	e2 e6       	ldi	r30, 0x62	; 98
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	90 81       	ld	r25, Z
 1f2:	80 e4       	ldi	r24, 0x40	; 64
 1f4:	89 27       	eor	r24, r25
 1f6:	80 83       	st	Z, r24
}
if (strcmp(receivedString, "F1") == 0) {
 1f8:	6b e0       	ldi	r22, 0x0B	; 11
 1fa:	71 e0       	ldi	r23, 0x01	; 1
 1fc:	84 e2       	ldi	r24, 0x24	; 36
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	1f d1       	rcall	.+574    	; 0x440 <strcmp>
 202:	89 2b       	or	r24, r25
 204:	31 f5       	brne	.+76     	; 0x252 <LOGIC+0xe4>
	f++;
 206:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <f>
 20a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <f+0x1>
 20e:	01 96       	adiw	r24, 0x01	; 1
 210:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <f+0x1>
 214:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <f>
	if(f%2==1)
 218:	81 70       	andi	r24, 0x01	; 1
 21a:	90 78       	andi	r25, 0x80	; 128
 21c:	99 23       	and	r25, r25
 21e:	24 f4       	brge	.+8      	; 0x228 <LOGIC+0xba>
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	8e 6f       	ori	r24, 0xFE	; 254
 224:	9f 6f       	ori	r25, 0xFF	; 255
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	41 f4       	brne	.+16     	; 0x23c <LOGIC+0xce>
	{
		PORTD |= (1 << PD6);
 22c:	96 9a       	sbi	0x12, 6	; 18
		PORTC |= (1 << PC4);
 22e:	ac 9a       	sbi	0x15, 4	; 21
		spd=1;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <spd+0x1>
 238:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <spd>
	}
	if(f%2==0)
 23c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <f>
 240:	80 fd       	sbrc	r24, 0
 242:	07 c0       	rjmp	.+14     	; 0x252 <LOGIC+0xe4>
	{
		PORTD &=~ (1 << PD6);
 244:	96 98       	cbi	0x12, 6	; 18
		PORTC &=~ (1 << PC4);
 246:	ac 98       	cbi	0x15, 4	; 21
		spd=0;
 248:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <spd+0x1>
 24c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <spd>
 250:	2c c0       	rjmp	.+88     	; 0x2aa <LOGIC+0x13c>
	}
}
if (strcmp(receivedString, "U1") == 0) {
 252:	61 e1       	ldi	r22, 0x11	; 17
 254:	71 e0       	ldi	r23, 0x01	; 1
 256:	84 e2       	ldi	r24, 0x24	; 36
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	f2 d0       	rcall	.+484    	; 0x440 <strcmp>
 25c:	89 2b       	or	r24, r25
 25e:	79 f4       	brne	.+30     	; 0x27e <LOGIC+0x110>
	if(spd>=1&&spd<=4)
 260:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <spd>
 264:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <spd+0x1>
 268:	9c 01       	movw	r18, r24
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	31 09       	sbc	r19, r1
 26e:	24 30       	cpi	r18, 0x04	; 4
 270:	31 05       	cpc	r19, r1
 272:	28 f4       	brcc	.+10     	; 0x27e <LOGIC+0x110>
	{
		spd++;
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <spd+0x1>
 27a:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <spd>
	}
	
	
}
if (strcmp(receivedString, "D1") == 0) {
 27e:	6e e0       	ldi	r22, 0x0E	; 14
 280:	71 e0       	ldi	r23, 0x01	; 1
 282:	84 e2       	ldi	r24, 0x24	; 36
 284:	91 e0       	ldi	r25, 0x01	; 1
 286:	dc d0       	rcall	.+440    	; 0x440 <strcmp>
 288:	89 2b       	or	r24, r25
 28a:	79 f4       	brne	.+30     	; 0x2aa <LOGIC+0x13c>
	if(spd>=2&&spd<=5)
 28c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <spd>
 290:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <spd+0x1>
 294:	9c 01       	movw	r18, r24
 296:	22 50       	subi	r18, 0x02	; 2
 298:	31 09       	sbc	r19, r1
 29a:	24 30       	cpi	r18, 0x04	; 4
 29c:	31 05       	cpc	r19, r1
 29e:	28 f4       	brcc	.+10     	; 0x2aa <LOGIC+0x13c>
	{
		spd--;
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <spd+0x1>
 2a6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <spd>
	}
}
if(spd==0)
 2aa:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <spd>
 2ae:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <spd+0x1>
 2b2:	89 2b       	or	r24, r25
 2b4:	91 f4       	brne	.+36     	; 0x2da <LOGIC+0x16c>
{
	PORTF&=~(1 << PF0);
 2b6:	e2 e6       	ldi	r30, 0x62	; 98
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	8e 7f       	andi	r24, 0xFE	; 254
 2be:	80 83       	st	Z, r24
	PORTF&=~(1 << PF1);
 2c0:	80 81       	ld	r24, Z
 2c2:	8d 7f       	andi	r24, 0xFD	; 253
 2c4:	80 83       	st	Z, r24
	PORTF&=~(1 << PF2);
 2c6:	80 81       	ld	r24, Z
 2c8:	8b 7f       	andi	r24, 0xFB	; 251
 2ca:	80 83       	st	Z, r24
	PORTF&=~(1 << PF3);
 2cc:	80 81       	ld	r24, Z
 2ce:	87 7f       	andi	r24, 0xF7	; 247
 2d0:	80 83       	st	Z, r24
	//FAN LEDS
	PORTC&=~(1<<3);
 2d2:	ab 98       	cbi	0x15, 3	; 21
	PORTC&=~(1<<2);
 2d4:	aa 98       	cbi	0x15, 2	; 21
	PORTC&=~(1<<1);
 2d6:	a9 98       	cbi	0x15, 1	; 21
	PORTC&=~(1<<0);
 2d8:	a8 98       	cbi	0x15, 0	; 21
}
if(spd==1)
 2da:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <spd>
 2de:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <spd+0x1>
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	91 f4       	brne	.+36     	; 0x30a <LOGIC+0x19c>
{
	PORTF&=~(1 << PF0);
 2e6:	e2 e6       	ldi	r30, 0x62	; 98
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	8e 7f       	andi	r24, 0xFE	; 254
 2ee:	80 83       	st	Z, r24
	PORTF&=~(1 << PF1);
 2f0:	80 81       	ld	r24, Z
 2f2:	8d 7f       	andi	r24, 0xFD	; 253
 2f4:	80 83       	st	Z, r24
	PORTF|= (1 << PF2);
 2f6:	80 81       	ld	r24, Z
 2f8:	84 60       	ori	r24, 0x04	; 4
 2fa:	80 83       	st	Z, r24
	PORTF&=~(1 << PF3);
 2fc:	80 81       	ld	r24, Z
 2fe:	87 7f       	andi	r24, 0xF7	; 247
 300:	80 83       	st	Z, r24
	//FAN LEDS
	PORTC&=~(1<<3);
 302:	ab 98       	cbi	0x15, 3	; 21
	PORTC&=~(1<<2);
 304:	aa 98       	cbi	0x15, 2	; 21
	PORTC&=~(1<<1);
 306:	a9 98       	cbi	0x15, 1	; 21
	PORTC&=~(1<<0);
 308:	a8 98       	cbi	0x15, 0	; 21
}
if(spd==2)
 30a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <spd>
 30e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <spd+0x1>
 312:	02 97       	sbiw	r24, 0x02	; 2
 314:	91 f4       	brne	.+36     	; 0x33a <LOGIC+0x1cc>
{
	PORTF&=~(1 << PF0);
 316:	e2 e6       	ldi	r30, 0x62	; 98
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	8e 7f       	andi	r24, 0xFE	; 254
 31e:	80 83       	st	Z, r24
	PORTF|= (1 << PF1);
 320:	80 81       	ld	r24, Z
 322:	82 60       	ori	r24, 0x02	; 2
 324:	80 83       	st	Z, r24
	PORTF&=~ (1 << PF2);
 326:	80 81       	ld	r24, Z
 328:	8b 7f       	andi	r24, 0xFB	; 251
 32a:	80 83       	st	Z, r24
	PORTF&=~(1 << PF3);
 32c:	80 81       	ld	r24, Z
 32e:	87 7f       	andi	r24, 0xF7	; 247
 330:	80 83       	st	Z, r24
	//FAN LEDS
	PORTC|= (1<<3);
 332:	ab 9a       	sbi	0x15, 3	; 21
	PORTC&=~(1<<2);
 334:	aa 98       	cbi	0x15, 2	; 21
	PORTC&=~(1<<1);
 336:	a9 98       	cbi	0x15, 1	; 21
	PORTC&=~(1<<0);
 338:	a8 98       	cbi	0x15, 0	; 21
}
if(spd==3)
 33a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <spd>
 33e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <spd+0x1>
 342:	03 97       	sbiw	r24, 0x03	; 3
 344:	91 f4       	brne	.+36     	; 0x36a <LOGIC+0x1fc>
{
	PORTF|= (1 << PF0);
 346:	e2 e6       	ldi	r30, 0x62	; 98
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	80 83       	st	Z, r24
	PORTF&=~(1 << PF1);
 350:	80 81       	ld	r24, Z
 352:	8d 7f       	andi	r24, 0xFD	; 253
 354:	80 83       	st	Z, r24
	PORTF&=~ (1 << PF2);
 356:	80 81       	ld	r24, Z
 358:	8b 7f       	andi	r24, 0xFB	; 251
 35a:	80 83       	st	Z, r24
	PORTF&=~(1 << PF3);
 35c:	80 81       	ld	r24, Z
 35e:	87 7f       	andi	r24, 0xF7	; 247
 360:	80 83       	st	Z, r24
	//FAN LEDS
	PORTC|= (1<<3);
 362:	ab 9a       	sbi	0x15, 3	; 21
	PORTC|= (1<<2);
 364:	aa 9a       	sbi	0x15, 2	; 21
	PORTC&=~(1<<1);
 366:	a9 98       	cbi	0x15, 1	; 21
	PORTC&=~(1<<0);
 368:	a8 98       	cbi	0x15, 0	; 21
	
}
if(spd==4)
 36a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <spd>
 36e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <spd+0x1>
 372:	04 97       	sbiw	r24, 0x04	; 4
 374:	91 f4       	brne	.+36     	; 0x39a <LOGIC+0x22c>
{
	PORTF&=~(1 << PF0);
 376:	e2 e6       	ldi	r30, 0x62	; 98
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	8e 7f       	andi	r24, 0xFE	; 254
 37e:	80 83       	st	Z, r24
	PORTF|= (1 << PF1);
 380:	80 81       	ld	r24, Z
 382:	82 60       	ori	r24, 0x02	; 2
 384:	80 83       	st	Z, r24
	PORTF|=  (1 << PF2);
 386:	80 81       	ld	r24, Z
 388:	84 60       	ori	r24, 0x04	; 4
 38a:	80 83       	st	Z, r24
	PORTF&=~(1 << PF3);
 38c:	80 81       	ld	r24, Z
 38e:	87 7f       	andi	r24, 0xF7	; 247
 390:	80 83       	st	Z, r24
	//FAN LEDS
	PORTC|= (1<<3);
 392:	ab 9a       	sbi	0x15, 3	; 21
	PORTC|= (1<<2);
 394:	aa 9a       	sbi	0x15, 2	; 21
	PORTC|= (1<<1);
 396:	a9 9a       	sbi	0x15, 1	; 21
	PORTC&=~(1<<0);
 398:	a8 98       	cbi	0x15, 0	; 21
	
}
if(spd==5)
 39a:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <spd>
 39e:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <spd+0x1>
 3a2:	05 97       	sbiw	r24, 0x05	; 5
 3a4:	91 f4       	brne	.+36     	; 0x3ca <LOGIC+0x25c>
{
	PORTF&=~(1 << PF0);
 3a6:	e2 e6       	ldi	r30, 0x62	; 98
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	8e 7f       	andi	r24, 0xFE	; 254
 3ae:	80 83       	st	Z, r24
	PORTF&=~(1 << PF1);
 3b0:	80 81       	ld	r24, Z
 3b2:	8d 7f       	andi	r24, 0xFD	; 253
 3b4:	80 83       	st	Z, r24
	PORTF&=~(1 << PF2);
 3b6:	80 81       	ld	r24, Z
 3b8:	8b 7f       	andi	r24, 0xFB	; 251
 3ba:	80 83       	st	Z, r24
	PORTF|= (1 << PF3);
 3bc:	80 81       	ld	r24, Z
 3be:	88 60       	ori	r24, 0x08	; 8
 3c0:	80 83       	st	Z, r24
	//FAN LEDS
	PORTC|= (1<<3);
 3c2:	ab 9a       	sbi	0x15, 3	; 21
	PORTC|= (1<<2);
 3c4:	aa 9a       	sbi	0x15, 2	; 21
	PORTC|= (1<<1);
 3c6:	a9 9a       	sbi	0x15, 1	; 21
	PORTC|= (1<<0);
 3c8:	a8 9a       	sbi	0x15, 0	; 21
 3ca:	08 95       	ret

000003cc <__vector_17>:
	
	// Enable SPI interrupt
	SPCR |= (1 << SPIE);
}

ISR(SPI_STC_vect) {
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	0b b6       	in	r0, 0x3b	; 59
 3d8:	0f 92       	push	r0
 3da:	2f 93       	push	r18
 3dc:	3f 93       	push	r19
 3de:	4f 93       	push	r20
 3e0:	5f 93       	push	r21
 3e2:	6f 93       	push	r22
 3e4:	7f 93       	push	r23
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
 3ea:	af 93       	push	r26
 3ec:	bf 93       	push	r27
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	
	char receivedChar = SPDR;
 3f2:	8f b1       	in	r24, 0x0f	; 15
	
	receivedString[stringIndex++] = receivedChar;
 3f4:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <__data_end>
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	9e 0f       	add	r25, r30
 3fc:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <__data_end>
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	ec 5d       	subi	r30, 0xDC	; 220
 404:	fe 4f       	sbci	r31, 0xFE	; 254
 406:	80 83       	st	Z, r24
	
	// Check if the end of the string is reached
	if (stringIndex == 2) {
 408:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 40c:	82 30       	cpi	r24, 0x02	; 2
 40e:	29 f4       	brne	.+10     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		// Null-terminate the string
		receivedString[2] = '\0';
 410:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <receivedString+0x2>
		
		// Reset the index for the next string
		stringIndex = 0;
 414:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
		LOGIC();
 418:	aa de       	rcall	.-684    	; 0x16e <LOGIC>
		// Check if the received string is "L1"
		
	}
}
 41a:	ff 91       	pop	r31
 41c:	ef 91       	pop	r30
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0b be       	out	0x3b, r0	; 59
 436:	0f 90       	pop	r0
 438:	0f be       	out	0x3f, r0	; 63
 43a:	0f 90       	pop	r0
 43c:	1f 90       	pop	r1
 43e:	18 95       	reti

00000440 <strcmp>:
 440:	fb 01       	movw	r30, r22
 442:	dc 01       	movw	r26, r24
 444:	8d 91       	ld	r24, X+
 446:	01 90       	ld	r0, Z+
 448:	80 19       	sub	r24, r0
 44a:	01 10       	cpse	r0, r1
 44c:	d9 f3       	breq	.-10     	; 0x444 <strcmp+0x4>
 44e:	99 0b       	sbc	r25, r25
 450:	08 95       	ret

00000452 <_exit>:
 452:	f8 94       	cli

00000454 <__stop_program>:
 454:	ff cf       	rjmp	.-2      	; 0x454 <__stop_program>
